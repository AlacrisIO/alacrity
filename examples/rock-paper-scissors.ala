import Game;

type hand = Rock | Paper | Scissors;

function hands_beat(hand0, hand1) : (hand, hand) => bool {
  return (hand0 = Scissors && hand1 = Paper)
    || (hand0 = Rock && hand1 = Scissors)
    || (hand0 = Paper && hand1 = Rock)
}

// TwoPlayers is a typeclass that specializes Players in the case there are only two players,
// Player0 and Player1. The vector returned by atomically_mutualize will be of size 2.
function rock_paper_scissors (amount) : TwoPlayers ==> amount => @consensual game_result {
  @consensual {
    let {player0: (_, hand0), player1: (_, hand1)} =
      atomically_mutualize(@for_each (salt (), input hand));
    return domination_game_result(hands_beat)(hand0, hand1);
  }
}
