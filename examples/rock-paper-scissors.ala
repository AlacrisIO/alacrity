import Game;

type Hand = Rock | Paper | Scissors;

// obtain this function automatically via a macro annotation,
// e.g. @enum type hand = Rock | Paper | Scissors;
const intOfHand : Hand => int = hand => {
  match hand with
  | Rock => 0
  | Paper => 1
  | Scissors => 2;
}

// strcmp style comparison
const handCompare : (Hand, Hand) => int = (hand0, hand1) =>
    (intOfHand(hand0)+4-intOfHand(hand1)) mod 3 - 1;

// TwoPlayers is a typeclass that specializes Players in the case there are only two players,
// Player0 and Player1. The vector returned by mutualize_salted will be of size 2.
const rockPaperScissors : TwoPlayers ==> Amount => @consensual GameResult = amount => {
  @consensual {
    const [hand0, hand1] = mutualizeSalted(@each (input hand));
    return dominationGameResult(handCompare)(hand0, hand1);
  }
}


// Local Variables:
// mode: JavaScript ;; ... until we have an Alacrity mode
// End:
