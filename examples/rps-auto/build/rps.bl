#lang alacrity/bl

(define-contract 
  #:participants (A B)
  [0 A () ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) 
    (define [4/PrimApp : uint256] (TXN_VALUE))
    (define [5/PrimApp : uint256] (ADD [0/wagerAmount : uint256] [1/escrowAmount : uint256]))
    (define [6/PrimApp : bool] (PEQ [4/PrimApp : uint256] [5/PrimApp : uint256]))
    (require! [6/PrimApp : bool])
    (wait! 1 ([0/wagerAmount : uint256] [1/escrowAmount : uint256]))]
  [1 B ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) () 
    (define [8/PrimApp : uint256] (TXN_VALUE))
    (define [9/PrimApp : bool] (PEQ [8/PrimApp : uint256] [0/wagerAmount : uint256]))
    (require! [9/PrimApp : bool])
    (wait! 2 ([0/wagerAmount : uint256] [1/escrowAmount : uint256]))]
  [2 A ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) ([25/PrimApp : uint256]) 
    (define [27/PrimApp : uint256] (TXN_VALUE))
    (define [28/PrimApp : bool] (PEQ [27/PrimApp : uint256] 0))
    (require! [28/PrimApp : bool])
    (wait! 3 ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256]))]
  [3 B ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256]) ([36/PureIf : uint256]) 
    (define [41/PrimApp : uint256] (TXN_VALUE))
    (define [42/PrimApp : bool] (PEQ [41/PrimApp : uint256] 0))
    (require! [42/PrimApp : bool])
    (define [43/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
    (define [44/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
    (define [45/PrimApp : bool] (IF_THEN_ELSE [43/PrimApp : bool] [44/PrimApp : bool] False))
    (require! [45/PrimApp : bool])
    (wait! 4 ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256] [36/PureIf : uint256]))]
  [4 A ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256] [36/PureIf : uint256]) ([21/PrimApp : uint256] [17/PureIf : uint256]) 
    (define [47/PrimApp : uint256] (TXN_VALUE))
    (define [48/PrimApp : bool] (PEQ [47/PrimApp : uint256] 0))
    (require! [48/PrimApp : bool])
    (define [49/PrimApp : bytes] (UINT256_TO_BYTES [21/PrimApp : uint256]))
    (define [50/PrimApp : bytes] (UINT256_TO_BYTES [17/PureIf : uint256]))
    (define [51/PrimApp : bytes] (BCAT [49/PrimApp : bytes] [50/PrimApp : bytes]))
    (define [52/PrimApp : uint256] (DIGEST [51/PrimApp : bytes]))
    (define [53/PrimApp : bool] (PEQ [25/PrimApp : uint256] [52/PrimApp : uint256]))
    (require! [53/PrimApp : bool])
    (define [54/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
    (define [55/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
    (define [56/PrimApp : bool] (IF_THEN_ELSE [54/PrimApp : bool] [55/PrimApp : bool] False))
    (require! [56/PrimApp : bool])
    (define [57/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
    (define [58/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
    (define [59/PrimApp : bool] (IF_THEN_ELSE [57/PrimApp : bool] [58/PrimApp : bool] False))
    (define [60/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
    (define [61/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
    (define [62/PrimApp : bool] (IF_THEN_ELSE [60/PrimApp : bool] [61/PrimApp : bool] False))
    (define [63/PrimApp : bool] (IF_THEN_ELSE [59/PrimApp : bool] [62/PrimApp : bool] False))
    (define [64/PrimApp : uint256] (SUB 4 [36/PureIf : uint256]))
    (define [65/PrimApp : uint256] (ADD [17/PureIf : uint256] [64/PrimApp : uint256]))
    (define [66/PrimApp : uint256] (MOD [65/PrimApp : uint256] 3))
    (define [67/PureIf : uint256] (IF_THEN_ELSE [62/PrimApp : bool] 0 1))
    (define [68/PureIf : uint256] (IF_THEN_ELSE [59/PrimApp : bool] 2 [67/PureIf : uint256]))
    (define [69/PureIf : uint256] (IF_THEN_ELSE [63/PrimApp : bool] [66/PrimApp : uint256] [68/PureIf : uint256]))
    (define [70/PrimApp : bool] (PLE 0 [69/PureIf : uint256]))
    (define [71/PrimApp : bool] (PLT [69/PureIf : uint256] 3))
    (define [72/PrimApp : bool] (IF_THEN_ELSE [70/PrimApp : bool] [71/PrimApp : bool] False))
    (assert! [72/PrimApp : bool])
    (define [73/PrimApp : bool] (PEQ [69/PureIf : uint256] 2))
    (define [74/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
    (define [75/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
    (define [76/PrimApp : bool] (IF_THEN_ELSE [74/PrimApp : bool] [75/PrimApp : bool] False))
    (define [77/PrimApp : bool] (IF_THEN_ELSE [73/PrimApp : bool] False True))
    (define [78/PrimApp : bool] (IF_THEN_ELSE [77/PrimApp : bool] True [76/PrimApp : bool]))
    (assert! [78/PrimApp : bool])
    (define [79/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
    (define [80/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
    (define [81/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
    (define [82/PrimApp : bool] (IF_THEN_ELSE [80/PrimApp : bool] [81/PrimApp : bool] False))
    (define [83/PrimApp : bool] (IF_THEN_ELSE [79/PrimApp : bool] False True))
    (define [84/PrimApp : bool] (IF_THEN_ELSE [83/PrimApp : bool] True [82/PrimApp : bool]))
    (assert! [84/PrimApp : bool])
    (define [85/PrimApp : bool] (PEQ [69/PureIf : uint256] 2))
    (define [86/PrimApp : bool] (PEQ [17/PureIf : uint256] 0))
    (define [87/PrimApp : bool] (IF_THEN_ELSE [86/PrimApp : bool] [85/PrimApp : bool] False))
    (possible? [87/PrimApp : bool])
    (define [88/PrimApp : bool] (PEQ [17/PureIf : uint256] 1))
    (define [89/PrimApp : bool] (IF_THEN_ELSE [88/PrimApp : bool] [85/PrimApp : bool] False))
    (possible? [89/PrimApp : bool])
    (define [90/PrimApp : bool] (PEQ [17/PureIf : uint256] 2))
    (define [91/PrimApp : bool] (IF_THEN_ELSE [90/PrimApp : bool] [85/PrimApp : bool] False))
    (possible? [91/PrimApp : bool])
    (define [92/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
    (define [93/PrimApp : bool] (PEQ [36/PureIf : uint256] 0))
    (define [94/PrimApp : bool] (IF_THEN_ELSE [93/PrimApp : bool] [92/PrimApp : bool] False))
    (possible? [94/PrimApp : bool])
    (define [95/PrimApp : bool] (PEQ [36/PureIf : uint256] 1))
    (define [96/PrimApp : bool] (IF_THEN_ELSE [95/PrimApp : bool] [92/PrimApp : bool] False))
    (possible? [96/PrimApp : bool])
    (define [97/PrimApp : bool] (PEQ [36/PureIf : uint256] 2))
    (define [98/PrimApp : bool] (IF_THEN_ELSE [97/PrimApp : bool] [92/PrimApp : bool] False))
    (possible? [98/PrimApp : bool])
    (define [99/PrimApp : bool] (PEQ [69/PureIf : uint256] 2))
    (define [100/PrimApp : uint256] (MUL 2 [0/wagerAmount : uint256]))
    (define [101/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
    (define [102/PrimApp : uint256] (MUL 2 [0/wagerAmount : uint256]))
    (define [103/PureIf : uint256] (IF_THEN_ELSE [101/PrimApp : bool] 0 [0/wagerAmount : uint256]))
    (define [104/PureIf : uint256] (IF_THEN_ELSE [101/PrimApp : bool] [102/PrimApp : uint256] [0/wagerAmount : uint256]))
    (define [105/PureIf : uint256] (IF_THEN_ELSE [99/PrimApp : bool] [100/PrimApp : uint256] [103/PureIf : uint256]))
    (define [106/PureIf : uint256] (IF_THEN_ELSE [99/PrimApp : bool] 0 [104/PureIf : uint256]))
    (define [107/PrimApp : uint256] (ADD [1/escrowAmount : uint256] [105/PureIf : uint256]))
    (transfer! A [107/PrimApp : uint256])
    (transfer! B [106/PureIf : uint256])
    (halt!)])

(define-participant A 
  ([0/wagerAmount : uint256] [1/escrowAmount : uint256])
  
  (define [2/PrimApp : bytes] (INTERACT "params"))
  (define [3/PrimApp : uint256] (ADD [0/wagerAmount : uint256] [1/escrowAmount : uint256]))
  (send! 0 () ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) [3/PrimApp : uint256])
  (define-values True () ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) (recv! 0))
  (define [4/PrimApp : uint256] (TXN_VALUE))
  (define [5/PrimApp : uint256] (ADD [0/wagerAmount : uint256] [1/escrowAmount : uint256]))
  (define [6/PrimApp : bool] (PEQ [4/PrimApp : uint256] [5/PrimApp : uint256]))
  (require! [6/PrimApp : bool])
  (define-values False ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) () (recv! 1))
  (define [8/PrimApp : uint256] (TXN_VALUE))
  (define [9/PrimApp : bool] (PEQ [8/PrimApp : uint256] [0/wagerAmount : uint256]))
  (require! [9/PrimApp : bool])
  (define [10/PrimApp : bytes] (INTERACT "getHand"))
  (define [11/PrimApp : bool] (BYTES_EQ [10/PrimApp : bytes] "ROCK"))
  (define [12/PrimApp : bool] (BYTES_EQ [10/PrimApp : bytes] "PAPER"))
  (define [13/PrimApp : bool] (BYTES_EQ [10/PrimApp : bytes] "SCISSORS"))
  (define [14/PrimApp : bool] (IF_THEN_ELSE [12/PrimApp : bool] True [13/PrimApp : bool]))
  (define [15/PrimApp : bool] (IF_THEN_ELSE [11/PrimApp : bool] True [14/PrimApp : bool]))
  (assume! [15/PrimApp : bool])
  (define [16/PureIf : uint256] (IF_THEN_ELSE [12/PrimApp : bool] 1 2))
  (define [17/PureIf : uint256] (IF_THEN_ELSE [11/PrimApp : bool] 0 [16/PureIf : uint256]))
  (define [18/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
  (define [19/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
  (define [20/PrimApp : bool] (IF_THEN_ELSE [18/PrimApp : bool] [19/PrimApp : bool] False))
  (assert! [20/PrimApp : bool])
  (define [21/PrimApp : uint256] (RANDOM))
  (define [22/PrimApp : bytes] (UINT256_TO_BYTES [21/PrimApp : uint256]))
  (define [23/PrimApp : bytes] (UINT256_TO_BYTES [17/PureIf : uint256]))
  (define [24/PrimApp : bytes] (BCAT [22/PrimApp : bytes] [23/PrimApp : bytes]))
  (define [25/PrimApp : uint256] (DIGEST [24/PrimApp : bytes]))
  (define [26/PrimApp : bytes] (INTERACT "commits"))
  (send! 2 ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) ([25/PrimApp : uint256]) 0)
  (define-values True ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) ([25/PrimApp : uint256]) (recv! 2))
  (define [27/PrimApp : uint256] (TXN_VALUE))
  (define [28/PrimApp : bool] (PEQ [27/PrimApp : uint256] 0))
  (require! [28/PrimApp : bool])
  (define-values False ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256]) ([36/PureIf : uint256]) (recv! 3))
  (define [41/PrimApp : uint256] (TXN_VALUE))
  (define [42/PrimApp : bool] (PEQ [41/PrimApp : uint256] 0))
  (require! [42/PrimApp : bool])
  (define [43/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
  (define [44/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
  (define [45/PrimApp : bool] (IF_THEN_ELSE [43/PrimApp : bool] [44/PrimApp : bool] False))
  (require! [45/PrimApp : bool])
  (define [46/PrimApp : bytes] (INTERACT "reveals"))
  (send! 4 ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256] [36/PureIf : uint256]) ([21/PrimApp : uint256] [17/PureIf : uint256]) 0)
  (define-values True ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256] [36/PureIf : uint256]) ([21/PrimApp : uint256] [17/PureIf : uint256]) (recv! 4))
  (define [47/PrimApp : uint256] (TXN_VALUE))
  (define [48/PrimApp : bool] (PEQ [47/PrimApp : uint256] 0))
  (require! [48/PrimApp : bool])
  (define [49/PrimApp : bytes] (UINT256_TO_BYTES [21/PrimApp : uint256]))
  (define [50/PrimApp : bytes] (UINT256_TO_BYTES [17/PureIf : uint256]))
  (define [51/PrimApp : bytes] (BCAT [49/PrimApp : bytes] [50/PrimApp : bytes]))
  (define [52/PrimApp : uint256] (DIGEST [51/PrimApp : bytes]))
  (define [53/PrimApp : bool] (PEQ [25/PrimApp : uint256] [52/PrimApp : uint256]))
  (require! [53/PrimApp : bool])
  (define [54/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
  (define [55/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
  (define [56/PrimApp : bool] (IF_THEN_ELSE [54/PrimApp : bool] [55/PrimApp : bool] False))
  (require! [56/PrimApp : bool])
  (define [57/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
  (define [58/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
  (define [59/PrimApp : bool] (IF_THEN_ELSE [57/PrimApp : bool] [58/PrimApp : bool] False))
  (define [60/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
  (define [61/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
  (define [62/PrimApp : bool] (IF_THEN_ELSE [60/PrimApp : bool] [61/PrimApp : bool] False))
  (define [63/PrimApp : bool] (IF_THEN_ELSE [59/PrimApp : bool] [62/PrimApp : bool] False))
  (define [64/PrimApp : uint256] (SUB 4 [36/PureIf : uint256]))
  (define [65/PrimApp : uint256] (ADD [17/PureIf : uint256] [64/PrimApp : uint256]))
  (define [66/PrimApp : uint256] (MOD [65/PrimApp : uint256] 3))
  (define [67/PureIf : uint256] (IF_THEN_ELSE [62/PrimApp : bool] 0 1))
  (define [68/PureIf : uint256] (IF_THEN_ELSE [59/PrimApp : bool] 2 [67/PureIf : uint256]))
  (define [69/PureIf : uint256] (IF_THEN_ELSE [63/PrimApp : bool] [66/PrimApp : uint256] [68/PureIf : uint256]))
  (define [70/PrimApp : bool] (PLE 0 [69/PureIf : uint256]))
  (define [71/PrimApp : bool] (PLT [69/PureIf : uint256] 3))
  (define [72/PrimApp : bool] (IF_THEN_ELSE [70/PrimApp : bool] [71/PrimApp : bool] False))
  (assert! [72/PrimApp : bool])
  (define [73/PrimApp : bool] (PEQ [69/PureIf : uint256] 2))
  (define [74/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
  (define [75/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
  (define [76/PrimApp : bool] (IF_THEN_ELSE [74/PrimApp : bool] [75/PrimApp : bool] False))
  (define [77/PrimApp : bool] (IF_THEN_ELSE [73/PrimApp : bool] False True))
  (define [78/PrimApp : bool] (IF_THEN_ELSE [77/PrimApp : bool] True [76/PrimApp : bool]))
  (assert! [78/PrimApp : bool])
  (define [79/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
  (define [80/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
  (define [81/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
  (define [82/PrimApp : bool] (IF_THEN_ELSE [80/PrimApp : bool] [81/PrimApp : bool] False))
  (define [83/PrimApp : bool] (IF_THEN_ELSE [79/PrimApp : bool] False True))
  (define [84/PrimApp : bool] (IF_THEN_ELSE [83/PrimApp : bool] True [82/PrimApp : bool]))
  (assert! [84/PrimApp : bool])
  (define [85/PrimApp : bool] (PEQ [69/PureIf : uint256] 2))
  (define [86/PrimApp : bool] (PEQ [17/PureIf : uint256] 0))
  (define [87/PrimApp : bool] (IF_THEN_ELSE [86/PrimApp : bool] [85/PrimApp : bool] False))
  (possible? [87/PrimApp : bool])
  (define [88/PrimApp : bool] (PEQ [17/PureIf : uint256] 1))
  (define [89/PrimApp : bool] (IF_THEN_ELSE [88/PrimApp : bool] [85/PrimApp : bool] False))
  (possible? [89/PrimApp : bool])
  (define [90/PrimApp : bool] (PEQ [17/PureIf : uint256] 2))
  (define [91/PrimApp : bool] (IF_THEN_ELSE [90/PrimApp : bool] [85/PrimApp : bool] False))
  (possible? [91/PrimApp : bool])
  (define [92/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
  (define [93/PrimApp : bool] (PEQ [36/PureIf : uint256] 0))
  (define [94/PrimApp : bool] (IF_THEN_ELSE [93/PrimApp : bool] [92/PrimApp : bool] False))
  (possible? [94/PrimApp : bool])
  (define [95/PrimApp : bool] (PEQ [36/PureIf : uint256] 1))
  (define [96/PrimApp : bool] (IF_THEN_ELSE [95/PrimApp : bool] [92/PrimApp : bool] False))
  (possible? [96/PrimApp : bool])
  (define [97/PrimApp : bool] (PEQ [36/PureIf : uint256] 2))
  (define [98/PrimApp : bool] (IF_THEN_ELSE [97/PrimApp : bool] [92/PrimApp : bool] False))
  (possible? [98/PrimApp : bool])
  (define [99/PrimApp : bool] (PEQ [69/PureIf : uint256] 2))
  (define [100/PrimApp : uint256] (MUL 2 [0/wagerAmount : uint256]))
  (define [101/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
  (define [102/PrimApp : uint256] (MUL 2 [0/wagerAmount : uint256]))
  (define [103/PureIf : uint256] (IF_THEN_ELSE [101/PrimApp : bool] 0 [0/wagerAmount : uint256]))
  (define [104/PureIf : uint256] (IF_THEN_ELSE [101/PrimApp : bool] [102/PrimApp : uint256] [0/wagerAmount : uint256]))
  (define [105/PureIf : uint256] (IF_THEN_ELSE [99/PrimApp : bool] [100/PrimApp : uint256] [103/PureIf : uint256]))
  (define [106/PureIf : uint256] (IF_THEN_ELSE [99/PrimApp : bool] 0 [104/PureIf : uint256]))
  (define [107/PrimApp : uint256] (ADD [1/escrowAmount : uint256] [105/PureIf : uint256]))
  (define [108/PrimApp : bytes] (INTERACT "outcome"))
  (define [109/PrimApp : bool] (PLE 0 [69/PureIf : uint256]))
  (define [110/PrimApp : bool] (PLT [69/PureIf : uint256] 3))
  (define [111/PrimApp : bool] (IF_THEN_ELSE [109/PrimApp : bool] [110/PrimApp : bool] False))
  (require! [111/PrimApp : bool])
  (define [112/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
  (define [113/PrimApp : bool] (PEQ [69/PureIf : uint256] 1))
  (define [114/PureIf : bytes] (IF_THEN_ELSE [113/PrimApp : bool] "Draw" "Alice wins"))
  (define [115/PureIf : bytes] (IF_THEN_ELSE [112/PrimApp : bool] "Bob wins" [114/PureIf : bytes]))
  [115/PureIf : bytes])

(define-participant B 
  ()
  
  (define-values False () ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) (recv! 0))
  (define [4/PrimApp : uint256] (TXN_VALUE))
  (define [5/PrimApp : uint256] (ADD [0/wagerAmount : uint256] [1/escrowAmount : uint256]))
  (define [6/PrimApp : bool] (PEQ [4/PrimApp : uint256] [5/PrimApp : uint256]))
  (require! [6/PrimApp : bool])
  (define [7/PrimApp : bytes] (INTERACT "accepts"))
  (send! 1 ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) () [0/wagerAmount : uint256])
  (define-values True ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) () (recv! 1))
  (define [8/PrimApp : uint256] (TXN_VALUE))
  (define [9/PrimApp : bool] (PEQ [8/PrimApp : uint256] [0/wagerAmount : uint256]))
  (require! [9/PrimApp : bool])
  (define-values False ([0/wagerAmount : uint256] [1/escrowAmount : uint256]) ([25/PrimApp : uint256]) (recv! 2))
  (define [27/PrimApp : uint256] (TXN_VALUE))
  (define [28/PrimApp : bool] (PEQ [27/PrimApp : uint256] 0))
  (require! [28/PrimApp : bool])
  (define [29/PrimApp : bytes] (INTERACT "getHand"))
  (define [30/PrimApp : bool] (BYTES_EQ [29/PrimApp : bytes] "ROCK"))
  (define [31/PrimApp : bool] (BYTES_EQ [29/PrimApp : bytes] "PAPER"))
  (define [32/PrimApp : bool] (BYTES_EQ [29/PrimApp : bytes] "SCISSORS"))
  (define [33/PrimApp : bool] (IF_THEN_ELSE [31/PrimApp : bool] True [32/PrimApp : bool]))
  (define [34/PrimApp : bool] (IF_THEN_ELSE [30/PrimApp : bool] True [33/PrimApp : bool]))
  (assume! [34/PrimApp : bool])
  (define [35/PureIf : uint256] (IF_THEN_ELSE [31/PrimApp : bool] 1 2))
  (define [36/PureIf : uint256] (IF_THEN_ELSE [30/PrimApp : bool] 0 [35/PureIf : uint256]))
  (define [37/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
  (define [38/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
  (define [39/PrimApp : bool] (IF_THEN_ELSE [37/PrimApp : bool] [38/PrimApp : bool] False))
  (assert! [39/PrimApp : bool])
  (define [40/PrimApp : bytes] (INTERACT "shows"))
  (send! 3 ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256]) ([36/PureIf : uint256]) 0)
  (define-values True ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256]) ([36/PureIf : uint256]) (recv! 3))
  (define [41/PrimApp : uint256] (TXN_VALUE))
  (define [42/PrimApp : bool] (PEQ [41/PrimApp : uint256] 0))
  (require! [42/PrimApp : bool])
  (define [43/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
  (define [44/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
  (define [45/PrimApp : bool] (IF_THEN_ELSE [43/PrimApp : bool] [44/PrimApp : bool] False))
  (require! [45/PrimApp : bool])
  (define-values False ([0/wagerAmount : uint256] [1/escrowAmount : uint256] [25/PrimApp : uint256] [36/PureIf : uint256]) ([21/PrimApp : uint256] [17/PureIf : uint256]) (recv! 4))
  (define [47/PrimApp : uint256] (TXN_VALUE))
  (define [48/PrimApp : bool] (PEQ [47/PrimApp : uint256] 0))
  (require! [48/PrimApp : bool])
  (define [49/PrimApp : bytes] (UINT256_TO_BYTES [21/PrimApp : uint256]))
  (define [50/PrimApp : bytes] (UINT256_TO_BYTES [17/PureIf : uint256]))
  (define [51/PrimApp : bytes] (BCAT [49/PrimApp : bytes] [50/PrimApp : bytes]))
  (define [52/PrimApp : uint256] (DIGEST [51/PrimApp : bytes]))
  (define [53/PrimApp : bool] (PEQ [25/PrimApp : uint256] [52/PrimApp : uint256]))
  (require! [53/PrimApp : bool])
  (define [54/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
  (define [55/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
  (define [56/PrimApp : bool] (IF_THEN_ELSE [54/PrimApp : bool] [55/PrimApp : bool] False))
  (require! [56/PrimApp : bool])
  (define [57/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
  (define [58/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
  (define [59/PrimApp : bool] (IF_THEN_ELSE [57/PrimApp : bool] [58/PrimApp : bool] False))
  (define [60/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
  (define [61/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
  (define [62/PrimApp : bool] (IF_THEN_ELSE [60/PrimApp : bool] [61/PrimApp : bool] False))
  (define [63/PrimApp : bool] (IF_THEN_ELSE [59/PrimApp : bool] [62/PrimApp : bool] False))
  (define [64/PrimApp : uint256] (SUB 4 [36/PureIf : uint256]))
  (define [65/PrimApp : uint256] (ADD [17/PureIf : uint256] [64/PrimApp : uint256]))
  (define [66/PrimApp : uint256] (MOD [65/PrimApp : uint256] 3))
  (define [67/PureIf : uint256] (IF_THEN_ELSE [62/PrimApp : bool] 0 1))
  (define [68/PureIf : uint256] (IF_THEN_ELSE [59/PrimApp : bool] 2 [67/PureIf : uint256]))
  (define [69/PureIf : uint256] (IF_THEN_ELSE [63/PrimApp : bool] [66/PrimApp : uint256] [68/PureIf : uint256]))
  (define [70/PrimApp : bool] (PLE 0 [69/PureIf : uint256]))
  (define [71/PrimApp : bool] (PLT [69/PureIf : uint256] 3))
  (define [72/PrimApp : bool] (IF_THEN_ELSE [70/PrimApp : bool] [71/PrimApp : bool] False))
  (assert! [72/PrimApp : bool])
  (define [73/PrimApp : bool] (PEQ [69/PureIf : uint256] 2))
  (define [74/PrimApp : bool] (PLE 0 [17/PureIf : uint256]))
  (define [75/PrimApp : bool] (PLT [17/PureIf : uint256] 3))
  (define [76/PrimApp : bool] (IF_THEN_ELSE [74/PrimApp : bool] [75/PrimApp : bool] False))
  (define [77/PrimApp : bool] (IF_THEN_ELSE [73/PrimApp : bool] False True))
  (define [78/PrimApp : bool] (IF_THEN_ELSE [77/PrimApp : bool] True [76/PrimApp : bool]))
  (assert! [78/PrimApp : bool])
  (define [79/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
  (define [80/PrimApp : bool] (PLE 0 [36/PureIf : uint256]))
  (define [81/PrimApp : bool] (PLT [36/PureIf : uint256] 3))
  (define [82/PrimApp : bool] (IF_THEN_ELSE [80/PrimApp : bool] [81/PrimApp : bool] False))
  (define [83/PrimApp : bool] (IF_THEN_ELSE [79/PrimApp : bool] False True))
  (define [84/PrimApp : bool] (IF_THEN_ELSE [83/PrimApp : bool] True [82/PrimApp : bool]))
  (assert! [84/PrimApp : bool])
  (define [85/PrimApp : bool] (PEQ [69/PureIf : uint256] 2))
  (define [86/PrimApp : bool] (PEQ [17/PureIf : uint256] 0))
  (define [87/PrimApp : bool] (IF_THEN_ELSE [86/PrimApp : bool] [85/PrimApp : bool] False))
  (possible? [87/PrimApp : bool])
  (define [88/PrimApp : bool] (PEQ [17/PureIf : uint256] 1))
  (define [89/PrimApp : bool] (IF_THEN_ELSE [88/PrimApp : bool] [85/PrimApp : bool] False))
  (possible? [89/PrimApp : bool])
  (define [90/PrimApp : bool] (PEQ [17/PureIf : uint256] 2))
  (define [91/PrimApp : bool] (IF_THEN_ELSE [90/PrimApp : bool] [85/PrimApp : bool] False))
  (possible? [91/PrimApp : bool])
  (define [92/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
  (define [93/PrimApp : bool] (PEQ [36/PureIf : uint256] 0))
  (define [94/PrimApp : bool] (IF_THEN_ELSE [93/PrimApp : bool] [92/PrimApp : bool] False))
  (possible? [94/PrimApp : bool])
  (define [95/PrimApp : bool] (PEQ [36/PureIf : uint256] 1))
  (define [96/PrimApp : bool] (IF_THEN_ELSE [95/PrimApp : bool] [92/PrimApp : bool] False))
  (possible? [96/PrimApp : bool])
  (define [97/PrimApp : bool] (PEQ [36/PureIf : uint256] 2))
  (define [98/PrimApp : bool] (IF_THEN_ELSE [97/PrimApp : bool] [92/PrimApp : bool] False))
  (possible? [98/PrimApp : bool])
  (define [99/PrimApp : bool] (PEQ [69/PureIf : uint256] 2))
  (define [100/PrimApp : uint256] (MUL 2 [0/wagerAmount : uint256]))
  (define [101/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
  (define [102/PrimApp : uint256] (MUL 2 [0/wagerAmount : uint256]))
  (define [103/PureIf : uint256] (IF_THEN_ELSE [101/PrimApp : bool] 0 [0/wagerAmount : uint256]))
  (define [104/PureIf : uint256] (IF_THEN_ELSE [101/PrimApp : bool] [102/PrimApp : uint256] [0/wagerAmount : uint256]))
  (define [105/PureIf : uint256] (IF_THEN_ELSE [99/PrimApp : bool] [100/PrimApp : uint256] [103/PureIf : uint256]))
  (define [106/PureIf : uint256] (IF_THEN_ELSE [99/PrimApp : bool] 0 [104/PureIf : uint256]))
  (define [107/PrimApp : uint256] (ADD [1/escrowAmount : uint256] [105/PureIf : uint256]))
  (define [108/PrimApp : bytes] (INTERACT "outcome"))
  (define [109/PrimApp : bool] (PLE 0 [69/PureIf : uint256]))
  (define [110/PrimApp : bool] (PLT [69/PureIf : uint256] 3))
  (define [111/PrimApp : bool] (IF_THEN_ELSE [109/PrimApp : bool] [110/PrimApp : bool] False))
  (require! [111/PrimApp : bool])
  (define [112/PrimApp : bool] (PEQ [69/PureIf : uint256] 0))
  (define [113/PrimApp : bool] (PEQ [69/PureIf : uint256] 1))
  (define [114/PureIf : bytes] (IF_THEN_ELSE [113/PrimApp : bool] "Draw" "Alice wins"))
  (define [115/PureIf : bytes] (IF_THEN_ELSE [112/PrimApp : bool] "Bob wins" [114/PureIf : bytes]))
  [115/PureIf : bytes])