#lang alacrity/exe
import "../../../ala/stdlib.ala";

const ROCK, PAPER, SCISSORS = values 0, 1, 2;
function isHand (x) {
    ((x == ROCK) || ((x == PAPER) || (x == SCISSORS))) }

const B_WINS, DRAW, A_WINS = values 0, 1, 2;
function isOutcome (x) {
    ((x == B_WINS) || ((x == DRAW) || (x == A_WINS))) }

function winner(handA, handB) : isOutcome {
    const validA = isHand(handA);
    const validB = isHand(handB);
    if (validA && validB) {
        ((handA + (4 - handB)) % 3) }
    else if validA {
        A_WINS }
    else if validB {
        B_WINS }
    else {
        DRAW } }

participant A {
    uint256 wagerAmount,
    uint256 escrowAmount,
    uint256 handA }

participant B {
    uint256 handB }

main {
    @A { assume! isHand(handA) };
    @B { assume! isHand(handB) };
   
    @A const commitA, saltA = precommit(handA);
    @A declassify! wagerAmount;
    @A declassify! escrowAmount;
    @A declassify! commitA;
    @A { publish! wagerAmount, escrowAmount, commitA
         w/ (wagerAmount + escrowAmount) };
    return;
    
    @B declassify! handB;
    @B { publish! handB w/ wagerAmount };
    require! isHand(handB);
    return;

    @A declassify! saltA;
    @A declassify! handA;
    @A { publish! saltA, handA w/ 0 };
    check_commit(commitA, saltA, handA);
    require! isHand(handA);
    const outcome = winner(handA, handB);
    assert! ((outcome == A_WINS) => isHand(handA));
    assert! ((outcome == B_WINS) => isHand(handB));
    const getsA, getsB =
          if (outcome == A_WINS) {
              values ((2 * wagerAmount) + escrowAmount), 0 }
          else { if (outcome == B_WINS) {
              values escrowAmount, (2 * wagerAmount) }
          else {
              values (wagerAmount + escrowAmount), wagerAmount } };
    transfer! A <- getsA;
    transfer! B <- getsB;
    return;

    possible? (outcome == A_WINS);
    possible? (outcome == B_WINS);
    outcome }
