#lang alacrity/exe

enum isHand { ROCK, PAPER, SCISSORS };
// TODO: automatically extract getHand, handOfString, stringOfHand, etc.

function getHand() : isHand {
    const s = interact("getHand");
    assume! isHand(s);
    s }

enum isOutcome { B_WINS, DRAW, A_WINS };

function winner(handA, handB) : isOutcome {
    assert! isHand(handA);
    assert! isHand(handB);
    ((handA + (4 - handB)) % 3) }

function fair_if(handX, optionX, canWinX) {
    possible? ((handX == optionX) && canWinX) }

function fair_for_player(handX, canWinX) {
    fair_if(handX, ROCK, canWinX);
    fair_if(handX, PAPER, canWinX);
    fair_if(handX, SCISSORS, canWinX) }

function fair_game(handA, handB, outcome) {
    fair_for_player(handA, (outcome == A_WINS));
    fair_for_player(handB, (outcome == B_WINS)) }

participant A {
    uint256 wagerAmount,
    uint256 escrowAmount }

participant B { }

main {
    @A const handA = getHand();
    @A const commitA, saltA = precommit(handA);
    @A publish! wagerAmount, escrowAmount, commitA
       w/ (wagerAmount + escrowAmount);
    commit;

    @B const handB = getHand();
    @B publish! handB w/ wagerAmount;
    require! isHand(handB);
    commit;

    @A publish! saltA, handA w/ 0;
    check_commit(commitA, saltA, handA);
    require! isHand(handA);
    const outcome = winner(handA, handB);
    fair_game(handA, handB, outcome);

    const getsA, getsB =
          if (outcome == A_WINS) {
              values (2 * wagerAmount), 0 }
          else if (outcome == B_WINS) {
              values 0, (2 * wagerAmount) }
          else {
              values wagerAmount, wagerAmount };
    transfer! A <- (escrowAmount + getsA);
    transfer! B <- getsB;
    commit;

    outcome
}
