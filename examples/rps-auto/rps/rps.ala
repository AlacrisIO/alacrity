#lang alacrity/exe
(require "../../../ala/stdlib.ala")

(define-values (ROCK PAPER SCISSORS) (values 0 1 2))
(define (hand? x)
  (or (= x ROCK) (or (= x PAPER) (= x SCISSORS))))

(define-values (B_WINS DRAW A_WINS) (values 0 1 2))
(define (outcome? x)
  (or (= x B_WINS) (or (= x DRAW) (= x A_WINS))))

(define (RPS-outcome A-hand B-hand) : outcome?
  (define A-valid? (hand? A-hand))
  (define B-valid? (hand? B-hand))
  (cond [(and A-valid? B-valid?)
         (modulo (+ A-hand (- 4 B-hand)) 3)]
        [A-valid? A_WINS]
        [B-valid? B_WINS]
        [else DRAW]))

#:participants
(define-participant A
  [wager-amount : uint256]
  [escrow-amount : uint256]
  [A-hand : uint256])
(define-participant B
  [B-hand : uint256])

#:main
(@ A (assume! (hand? A-hand)))
(@ B (assume! (hand? B-hand)))
(@ A (define-values (A-commit A-salt) (precommit A-hand)))
(@ A (declassify! wager-amount))
(@ A (declassify! escrow-amount))
(@ A (declassify! A-commit))
(@ A (publish! wager-amount escrow-amount A-commit)
     (pay! (+ wager-amount escrow-amount)))

(@ B (declassify! B-hand))
(@ B (publish! B-hand) (pay! wager-amount)
     (require! (hand? B-hand)))

(@ A (declassify! A-salt))
(@ A (declassify! A-hand))
(@ A (publish! A-salt A-hand) (pay! 0)
     (check-commit! A-commit A-salt A-hand)
     (require! (hand? A-hand))
     (define outcome (RPS-outcome A-hand B-hand))
     (assert! (implies (= outcome A_WINS) (hand? A-hand)))
     (assert! (implies (= outcome B_WINS) (hand? B-hand)))
     (define-values (A-gets B-gets)
       (cond
         [(= outcome A_WINS)
          (values (+ (* 2 wager-amount) escrow-amount) 0)]
         [(= outcome B_WINS)
          (values escrow-amount (* 2 wager-amount))]
         [else
          (values (+ wager-amount escrow-amount) wager-amount)]))
     (transfer! A A-gets)
     (transfer! B B-gets))

(possible? (= outcome A_WINS))
(possible? (= outcome B_WINS))
outcome
