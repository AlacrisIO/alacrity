import * as stdlib from './alacrity-runtime.mjs';

/* XXX Copy the ABI from the solc output */

/* XXX Copy the bytecode from the solc output */

export function A(ctc, interact, v0, v1, v2, kTop) {
  const v4 = v2 == 0;
  const v5 = v2 == 1;
  const v6 = v2 == 2;
  const v7 = v5 ? true : v6;
  const v8 = v4 ? true : v7;
  stdlib.assert(v8);
  const v14 = stdlib.randomUInt256();
  const v15 = stdlib.hexOf(v14);
  const v16 = stdlib.hexOf(v2);
  const v17 = stdlib.msg_cat(v15, v16);
  const v18 = stdlib.keccak256(v17);
  const v19 = v0;
  const v20 = v1;
  const v21 = v18;
  const v22 = v19 + v20;
  ctc.send("m0", [v19, v20, v21], v22);
  ctc.recv("e0", (v19, v20, v21) => {
    ctc.recv("e1", (v23) => {
      const v24 = v23 == 0;
      const v25 = v23 == 1;
      const v26 = v23 == 2;
      const v27 = v25 ? true : v26;
      const v28 = v24 ? true : v27;
      stdlib.assert(v28);
      const v29 = v14;
      const v30 = v2;
      ctc.send("m2", [v19, v20, v21, v23, v29, v30], 0);
      ctc.recv("e2", (v29, v30) => {
        const v31 = stdlib.hexOf(v29);
        const v32 = stdlib.hexOf(v30);
        const v33 = stdlib.msg_cat(v31, v32);
        const v34 = stdlib.keccak256(v33);
        const v35 = v21 == v34;
        stdlib.assert(v35);
        const v36 = v30 == 0;
        const v37 = v30 == 1;
        const v38 = v30 == 2;
        const v39 = v37 ? true : v38;
        const v40 = v36 ? true : v39;
        stdlib.assert(v40);
        const v41 = v30 == 0;
        const v42 = v30 == 1;
        const v43 = v30 == 2;
        const v44 = v42 ? true : v43;
        const v45 = v41 ? true : v44;
        const v46 = v23 == 0;
        const v47 = v23 == 1;
        const v48 = v23 == 2;
        const v49 = v47 ? true : v48;
        const v50 = v46 ? true : v49;
        const v51 = v45 ? v50 : false;
        const v52 = 4 - v23;
        const v53 = v30 + v52;
        const v54 = v53 % 3;
        const v55 = v50 ? 0 : 1;
        const v56 = v45 ? 2 : v55;
        const v57 = v51 ? v54 : v56;
        const v58 = v57 == 0;
        const v59 = v57 == 1;
        const v60 = v57 == 2;
        const v61 = v59 ? true : v60;
        const v62 = v58 ? true : v61;
        stdlib.assert(v62);
        const v63 = v57 == 2;
        const v64 = v30 == 0;
        const v65 = v30 == 1;
        const v66 = v30 == 2;
        const v67 = v65 ? true : v66;
        const v68 = v64 ? true : v67;
        const v69 = v63 ? false : true;
        const v70 = v69 ? true : v68;
        stdlib.assert(v70);
        const v71 = v57 == 0;
        const v72 = v23 == 0;
        const v73 = v23 == 1;
        const v74 = v23 == 2;
        const v75 = v73 ? true : v74;
        const v76 = v72 ? true : v75;
        const v77 = v71 ? false : true;
        const v78 = v77 ? true : v76;
        stdlib.assert(v78);
        const v79 = v57 == 2;
        const v80 = 2 * v19;
        const v81 = v80 + v20;
        const v82 = v57 == 0;
        const v83 = 2 * v19;
        const v84 = v19 + v20;
        const v85 = v82 ? v20 : v84;
        const v86 = v82 ? v83 : v19;
        const v87 = v79 ? v81 : v85;
        const v88 = v79 ? 0 : v86;
        kTop(v57); }) }) }) }

export function B(ctc, interact, v3, kTop) {
  const v9 = v3 == 0;
  const v10 = v3 == 1;
  const v11 = v3 == 2;
  const v12 = v10 ? true : v11;
  const v13 = v9 ? true : v12;
  stdlib.assert(v13);
  ctc.recv("e0", (v19, v20, v21) => {
    const v23 = v3;
    ctc.send("m1", [v19, v20, v21, v23], v19);
    ctc.recv("e1", (v23) => {
      const v24 = v23 == 0;
      const v25 = v23 == 1;
      const v26 = v23 == 2;
      const v27 = v25 ? true : v26;
      const v28 = v24 ? true : v27;
      stdlib.assert(v28);
      ctc.recv("e2", (v29, v30) => {
        const v31 = stdlib.hexOf(v29);
        const v32 = stdlib.hexOf(v30);
        const v33 = stdlib.msg_cat(v31, v32);
        const v34 = stdlib.keccak256(v33);
        const v35 = v21 == v34;
        stdlib.assert(v35);
        const v36 = v30 == 0;
        const v37 = v30 == 1;
        const v38 = v30 == 2;
        const v39 = v37 ? true : v38;
        const v40 = v36 ? true : v39;
        stdlib.assert(v40);
        const v41 = v30 == 0;
        const v42 = v30 == 1;
        const v43 = v30 == 2;
        const v44 = v42 ? true : v43;
        const v45 = v41 ? true : v44;
        const v46 = v23 == 0;
        const v47 = v23 == 1;
        const v48 = v23 == 2;
        const v49 = v47 ? true : v48;
        const v50 = v46 ? true : v49;
        const v51 = v45 ? v50 : false;
        const v52 = 4 - v23;
        const v53 = v30 + v52;
        const v54 = v53 % 3;
        const v55 = v50 ? 0 : 1;
        const v56 = v45 ? 2 : v55;
        const v57 = v51 ? v54 : v56;
        const v58 = v57 == 0;
        const v59 = v57 == 1;
        const v60 = v57 == 2;
        const v61 = v59 ? true : v60;
        const v62 = v58 ? true : v61;
        stdlib.assert(v62);
        const v63 = v57 == 2;
        const v64 = v30 == 0;
        const v65 = v30 == 1;
        const v66 = v30 == 2;
        const v67 = v65 ? true : v66;
        const v68 = v64 ? true : v67;
        const v69 = v63 ? false : true;
        const v70 = v69 ? true : v68;
        stdlib.assert(v70);
        const v71 = v57 == 0;
        const v72 = v23 == 0;
        const v73 = v23 == 1;
        const v74 = v23 == 2;
        const v75 = v73 ? true : v74;
        const v76 = v72 ? true : v75;
        const v77 = v71 ? false : true;
        const v78 = v77 ? true : v76;
        stdlib.assert(v78);
        const v79 = v57 == 2;
        const v80 = 2 * v19;
        const v81 = v80 + v20;
        const v82 = v57 == 0;
        const v83 = 2 * v19;
        const v84 = v19 + v20;
        const v85 = v82 ? v20 : v84;
        const v86 = v82 ? v83 : v19;
        const v87 = v79 ? v81 : v85;
        const v88 = v79 ? 0 : v86;
        kTop(v57); }) }) }) }