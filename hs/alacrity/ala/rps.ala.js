import * as stdlib from './alacrity-runtime.mjs';

export function initialize(net, interact) {
  return {
    A:
    (pA, pB, v0, v1, v2, kTop) => {
      return net.make(pA, pB, () => {
        var v4 = v2 == 0;
        var v5 = v2 == 1;
        var v6 = v2 == 2;
        var v7 = v5 ? true : v6;
        var v8 = v4 ? true : v7;
        stdlib.assert(v8);
        var v9 = stdlib.randomUInt256();
        var v10 = stdlib.hexOf(v9);
        var v11 = stdlib.hexOf(v2);
        var v12 = stdlib.hexOf(v10, v11);
        var v13 = stdlib.keccak256(v12);
        var v14 = v0;
        var v15 = v1;
        var v16 = v13;
        var v17 = v14 + v15;
        net.send("msg0_m", ["uint256", "uint256", "uint256"], [v14, v15, v16], v17);
        net.recv("msg0_evt", ["uint256", "uint256", "uint256"], (v14, v15, v16) => {
          net.recv("msg1_evt", ["uint256"], (v23) => {
            var v24 = true;
            var v25 = v24 ? false : true;
            var v26 = v23 == 0;
            var v27 = v23 == 1;
            var v28 = v23 == 2;
            var v29 = v27 ? true : v28;
            var v30 = v26 ? true : v29;
            var v31 = v25 ? false : true;
            var v32 = v31 ? true : v30;
            stdlib.assert(v32);
            var v33 = v9;
            var v34 = v2;
            net.send("msg2_m", ["uint256", "uint256", "uint256", "uint256", "uint256", "uint256"], [v14, v15, v16, v23, v33, v34], 0);
            net.recv("msg2_evt", ["uint256", "uint256"], (v33, v34) => {
              var v35 = stdlib.hexOf(v33);
              var v36 = stdlib.hexOf(v34);
              var v37 = stdlib.hexOf(v35, v36);
              var v38 = stdlib.keccak256(v37);
              var v39 = v16 == v38;
              stdlib.assert(v39);
              var v40 = true;
              var v41 = v40 ? false : true;
              var v42 = v34 == 0;
              var v43 = v34 == 1;
              var v44 = v34 == 2;
              var v45 = v43 ? true : v44;
              var v46 = v42 ? true : v45;
              var v47 = v41 ? false : true;
              var v48 = v47 ? true : v46;
              stdlib.assert(v48);
              var v49 = v34 == 0;
              var v50 = v34 == 1;
              var v51 = v34 == 2;
              var v52 = v50 ? true : v51;
              var v53 = v49 ? true : v52;
              var v54 = v23 == 0;
              var v55 = v23 == 1;
              var v56 = v23 == 2;
              var v57 = v55 ? true : v56;
              var v58 = v54 ? true : v57;
              var v59 = v53 ? v58 : false;
              var v60 = 4 - v23;
              var v61 = v34 + v60;
              var v62 = v61 % 3;
              var v63 = v58 ? 0 : 1;
              var v64 = v53 ? 2 : v63;
              var v65 = v59 ? v62 : v64;
              var v66 = v65 == 0;
              var v67 = v65 == 1;
              var v68 = v65 == 2;
              var v69 = v67 ? true : v68;
              var v70 = v66 ? true : v69;
              stdlib.assert(v70);
              var v71 = v65 == 2;
              var v72 = v34 == 0;
              var v73 = v34 == 1;
              var v74 = v34 == 2;
              var v75 = v73 ? true : v74;
              var v76 = v72 ? true : v75;
              var v77 = v71 ? false : true;
              var v78 = v77 ? true : v76;
              stdlib.assert(v78);
              var v79 = v65 == 0;
              var v80 = v23 == 0;
              var v81 = v23 == 1;
              var v82 = v23 == 2;
              var v83 = v81 ? true : v82;
              var v84 = v80 ? true : v83;
              var v85 = v79 ? false : true;
              var v86 = v85 ? true : v84;
              stdlib.assert(v86);
              var v87 = v65 == 2;
              var v88 = 2 * v14;
              var v89 = v88 + v15;
              var v90 = v65 == 0;
              var v91 = 2 * v14;
              var v92 = v14 + v15;
              var v93 = v90 ? v15 : v92;
              var v94 = v90 ? v91 : v14;
              var v95 = v87 ? v89 : v93;
              var v96 = v87 ? 0 : v94;
              kTop(v65); }) }) }) }); }
    ,
    B:
    (ctc, pA, pB, v3, kTop) => {
      return net.attach(ctc, pA, pB, () => {
        net.recv("msg0_evt", ["uint256", "uint256", "uint256"], (v14, v15, v16) => {
          var v18 = v3 == 0;
          var v19 = v3 == 1;
          var v20 = v3 == 2;
          var v21 = v19 ? true : v20;
          var v22 = v18 ? true : v21;
          stdlib.assert(v22);
          var v23 = v3;
          net.send("msg1_m", ["uint256", "uint256", "uint256", "uint256"], [v14, v15, v16, v23], v14);
          net.recv("msg1_evt", ["uint256"], (v23) => {
            var v24 = true;
            var v25 = v24 ? false : true;
            var v26 = v23 == 0;
            var v27 = v23 == 1;
            var v28 = v23 == 2;
            var v29 = v27 ? true : v28;
            var v30 = v26 ? true : v29;
            var v31 = v25 ? false : true;
            var v32 = v31 ? true : v30;
            stdlib.assert(v32);
            net.recv("msg2_evt", ["uint256", "uint256"], (v33, v34) => {
              var v35 = stdlib.hexOf(v33);
              var v36 = stdlib.hexOf(v34);
              var v37 = stdlib.hexOf(v35, v36);
              var v38 = stdlib.keccak256(v37);
              var v39 = v16 == v38;
              stdlib.assert(v39);
              var v40 = true;
              var v41 = v40 ? false : true;
              var v42 = v34 == 0;
              var v43 = v34 == 1;
              var v44 = v34 == 2;
              var v45 = v43 ? true : v44;
              var v46 = v42 ? true : v45;
              var v47 = v41 ? false : true;
              var v48 = v47 ? true : v46;
              stdlib.assert(v48);
              var v49 = v34 == 0;
              var v50 = v34 == 1;
              var v51 = v34 == 2;
              var v52 = v50 ? true : v51;
              var v53 = v49 ? true : v52;
              var v54 = v23 == 0;
              var v55 = v23 == 1;
              var v56 = v23 == 2;
              var v57 = v55 ? true : v56;
              var v58 = v54 ? true : v57;
              var v59 = v53 ? v58 : false;
              var v60 = 4 - v23;
              var v61 = v34 + v60;
              var v62 = v61 % 3;
              var v63 = v58 ? 0 : 1;
              var v64 = v53 ? 2 : v63;
              var v65 = v59 ? v62 : v64;
              var v66 = v65 == 0;
              var v67 = v65 == 1;
              var v68 = v65 == 2;
              var v69 = v67 ? true : v68;
              var v70 = v66 ? true : v69;
              stdlib.assert(v70);
              var v71 = v65 == 2;
              var v72 = v34 == 0;
              var v73 = v34 == 1;
              var v74 = v34 == 2;
              var v75 = v73 ? true : v74;
              var v76 = v72 ? true : v75;
              var v77 = v71 ? false : true;
              var v78 = v77 ? true : v76;
              stdlib.assert(v78);
              var v79 = v65 == 0;
              var v80 = v23 == 0;
              var v81 = v23 == 1;
              var v82 = v23 == 2;
              var v83 = v81 ? true : v82;
              var v84 = v80 ? true : v83;
              var v85 = v79 ? false : true;
              var v86 = v85 ? true : v84;
              stdlib.assert(v86);
              var v87 = v65 == 2;
              var v88 = 2 * v14;
              var v89 = v88 + v15;
              var v90 = v65 == 0;
              var v91 = 2 * v14;
              var v92 = v14 + v15;
              var v93 = v90 ? v15 : v92;
              var v94 = v90 ? v91 : v14;
              var v95 = v87 ? v89 : v93;
              var v96 = v87 ? 0 : v94;
              kTop(v65); }) }) }) }); } }; }