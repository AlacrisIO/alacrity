import * as stdlib from 'stdlib.mjs';

export function initialize(net, interact) {
  return {
    A:
    (pA, pB, v0, v1, v2, kTop) => {
      return net.make(pA, pB, () => {
        var v4 = v0 == 0;
        var v5 = v0 == 1;
        var v6 = v0 == 2;
        var v7 = v5 ? true : v6;
        var v8 = v4 ? true : v7;
        stdlib.assert(v8);
        var v9 = stdlib.random();
        var v10 = stdlib.bytes_cat(v9, v0);
        var v11 = stdlib.keccak256(v10);
        var v12 = v2;
        var v13 = v1;
        var v14 = v11;
        var v15 = v12 + v13;
        net.send("msg0_m", ["uint256", "uint256", "uint256"], [v12, v13, v14], v15);
        net.recv("msg0_evt", ["uint256", "uint256", "uint256"], (v12, v13, v14) => {
          net.recv("msg1_evt", ["uint256"], (v21) => {
            var v22 = true;
            var v23 = v22 ? false : true;
            var v24 = v21 == 0;
            var v25 = v21 == 1;
            var v26 = v21 == 2;
            var v27 = v25 ? true : v26;
            var v28 = v24 ? true : v27;
            var v29 = v23 ? false : true;
            var v30 = v29 ? true : v28;
            stdlib.assert(v30);
            var v31 = v9;
            var v32 = v0;
            net.send("msg2_m", ["uint256", "uint256", "uint256", "uint256", "uint256", "uint256"], [v12, v13, v14, v21, v31, v32], 0);
            net.recv("msg2_evt", ["uint256", "uint256"], (v31, v32) => {
              var v33 = stdlib.bytes_cat(v31, v32);
              var v34 = stdlib.keccak256(v33);
              var v35 = v14 == v34;
              stdlib.assert(v35);
              var v36 = true;
              var v37 = v36 ? false : true;
              var v38 = v32 == 0;
              var v39 = v32 == 1;
              var v40 = v32 == 2;
              var v41 = v39 ? true : v40;
              var v42 = v38 ? true : v41;
              var v43 = v37 ? false : true;
              var v44 = v43 ? true : v42;
              stdlib.assert(v44);
              var v45 = v32 == 0;
              var v46 = v32 == 1;
              var v47 = v32 == 2;
              var v48 = v46 ? true : v47;
              var v49 = v45 ? true : v48;
              var v50 = v21 == 0;
              var v51 = v21 == 1;
              var v52 = v21 == 2;
              var v53 = v51 ? true : v52;
              var v54 = v50 ? true : v53;
              var v55 = v49 ? v54 : false;
              var v56 = 4 - v21;
              var v57 = v32 + v56;
              var v58 = v57 % 3;
              var v59 = v54 ? 0 : 1;
              var v60 = v49 ? 2 : v59;
              var v61 = v55 ? v58 : v60;
              var v62 = v61 == 0;
              var v63 = v61 == 1;
              var v64 = v61 == 2;
              var v65 = v63 ? true : v64;
              var v66 = v62 ? true : v65;
              stdlib.assert(v66);
              var v67 = v61 == 2;
              var v68 = v32 == 0;
              var v69 = v32 == 1;
              var v70 = v32 == 2;
              var v71 = v69 ? true : v70;
              var v72 = v68 ? true : v71;
              var v73 = v67 ? false : true;
              var v74 = v73 ? true : v72;
              stdlib.assert(v74);
              var v75 = v61 == 0;
              var v76 = v21 == 0;
              var v77 = v21 == 1;
              var v78 = v21 == 2;
              var v79 = v77 ? true : v78;
              var v80 = v76 ? true : v79;
              var v81 = v75 ? false : true;
              var v82 = v81 ? true : v80;
              stdlib.assert(v82);
              var v83 = v61 == 2;
              var v84 = 2 * v12;
              var v85 = v84 + v13;
              var v86 = v61 == 0;
              var v87 = 2 * v12;
              var v88 = v12 + v13;
              var v89 = v86 ? v13 : v88;
              var v90 = v86 ? v87 : v12;
              var v91 = v83 ? v85 : v89;
              var v92 = v83 ? 0 : v90;
              kTop(v61); }) }) }) }); }
    ,
    B:
    (ctc, pA, pB, v3, kTop) => {
      return net.attach(ctc, pA, pB, () => {
        net.recv("msg0_evt", ["uint256", "uint256", "uint256"], (v12, v13, v14) => {
          var v16 = v3 == 0;
          var v17 = v3 == 1;
          var v18 = v3 == 2;
          var v19 = v17 ? true : v18;
          var v20 = v16 ? true : v19;
          stdlib.assert(v20);
          var v21 = v3;
          net.send("msg1_m", ["uint256", "uint256", "uint256", "uint256"], [v12, v13, v14, v21], v12);
          net.recv("msg1_evt", ["uint256"], (v21) => {
            var v22 = true;
            var v23 = v22 ? false : true;
            var v24 = v21 == 0;
            var v25 = v21 == 1;
            var v26 = v21 == 2;
            var v27 = v25 ? true : v26;
            var v28 = v24 ? true : v27;
            var v29 = v23 ? false : true;
            var v30 = v29 ? true : v28;
            stdlib.assert(v30);
            net.recv("msg2_evt", ["uint256", "uint256"], (v31, v32) => {
              var v33 = stdlib.bytes_cat(v31, v32);
              var v34 = stdlib.keccak256(v33);
              var v35 = v14 == v34;
              stdlib.assert(v35);
              var v36 = true;
              var v37 = v36 ? false : true;
              var v38 = v32 == 0;
              var v39 = v32 == 1;
              var v40 = v32 == 2;
              var v41 = v39 ? true : v40;
              var v42 = v38 ? true : v41;
              var v43 = v37 ? false : true;
              var v44 = v43 ? true : v42;
              stdlib.assert(v44);
              var v45 = v32 == 0;
              var v46 = v32 == 1;
              var v47 = v32 == 2;
              var v48 = v46 ? true : v47;
              var v49 = v45 ? true : v48;
              var v50 = v21 == 0;
              var v51 = v21 == 1;
              var v52 = v21 == 2;
              var v53 = v51 ? true : v52;
              var v54 = v50 ? true : v53;
              var v55 = v49 ? v54 : false;
              var v56 = 4 - v21;
              var v57 = v32 + v56;
              var v58 = v57 % 3;
              var v59 = v54 ? 0 : 1;
              var v60 = v49 ? 2 : v59;
              var v61 = v55 ? v58 : v60;
              var v62 = v61 == 0;
              var v63 = v61 == 1;
              var v64 = v61 == 2;
              var v65 = v63 ? true : v64;
              var v66 = v62 ? true : v65;
              stdlib.assert(v66);
              var v67 = v61 == 2;
              var v68 = v32 == 0;
              var v69 = v32 == 1;
              var v70 = v32 == 2;
              var v71 = v69 ? true : v70;
              var v72 = v68 ? true : v71;
              var v73 = v67 ? false : true;
              var v74 = v73 ? true : v72;
              stdlib.assert(v74);
              var v75 = v61 == 0;
              var v76 = v21 == 0;
              var v77 = v21 == 1;
              var v78 = v21 == 2;
              var v79 = v77 ? true : v78;
              var v80 = v76 ? true : v79;
              var v81 = v75 ? false : true;
              var v82 = v81 ? true : v80;
              stdlib.assert(v82);
              var v83 = v61 == 2;
              var v84 = 2 * v12;
              var v85 = v84 + v13;
              var v86 = v61 == 0;
              var v87 = 2 * v12;
              var v88 = v12 + v13;
              var v89 = v86 ? v13 : v88;
              var v90 = v86 ? v87 : v12;
              var v91 = v83 ? v85 : v89;
              var v92 = v83 ? 0 : v90;
              kTop(v61); }) }) }) }); } }; }