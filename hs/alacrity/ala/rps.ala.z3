
; (=> (= (uint256->bytes a) (uint256->bytes b))
;     (= a b))

; (=> (= (digest a) (digest b))
;     (= a b))

; (=> (= (msg-cat a1 a2) (msg-cat b1 b2))
;     (&& (= a1 b1) (= a2 b2)))

(declare-datatypes ()
  ((Bytes
    (uint256->bytes (bytes-integer Int))
    (msg-cat (msg-left Bytes) (msg-right Bytes)))))

(declare-fun digest (Bytes) Int)

;; This definition only works in Z3 version >=4.8.5,
;; because `match` is broken in Z3 version <=4.8.4.
; (define-fun-rec bytes-length ((bs Bytes)) Int
;   (match bs
;     (((uint256->bytes _) 32)
;      ((digest _) 32)
;      ((msg-cat l r) (+ 32 (bytes-length l) (bytes-length r))))))

(define-fun-rec bytes-length ((bs Bytes)) Int
  (if ((_ is uint256->bytes) bs)
      32
      (if ((_ is digest) bs)
          32
          (+ 32 (bytes-length (msg-left bs)) (bytes-length (msg-right bs))))))


(declare-const v0 Int)

(declare-const v1 Int)

(declare-const v2 Int)

(declare-const v3 Int)

(push)
  (echo "Verifying with honest = True; role = RoleContract")
  (declare-const ctc_balance0 Int)
  (assert (= ctc_balance0 0))
  (declare-const v4 Bool)
  (assert (= v4 (= v2 0)))
  (declare-const v5 Bool)
  (assert (= v5 (= v2 1)))
  (declare-const v6 Bool)
  (assert (= v6 (= v2 2)))
  (declare-const v7 Bool)
  (assert (= v7 (ite v5 true v6)))
  (declare-const v8 Bool)
  (assert (= v8 (ite v4 true v7)))
  (assert v8)
  (declare-const v9 Bool)
  (assert (= v9 (= v3 0)))
  (declare-const v10 Bool)
  (assert (= v10 (= v3 1)))
  (declare-const v11 Bool)
  (assert (= v11 (= v3 2)))
  (declare-const v12 Bool)
  (assert (= v12 (ite v10 true v11)))
  (declare-const v13 Bool)
  (assert (= v13 (ite v9 true v12)))
  (assert v13)
  (declare-const v14 Int)
  
  (declare-const v15 Bytes)
  (assert (= v15 (uint256->bytes v14)))
  (declare-const v16 Bytes)
  (assert (= v16 (uint256->bytes v2)))
  (declare-const v17 Bytes)
  (assert (= v17 (msg-cat v15 v16)))
  (declare-const v18 Int)
  (assert (= v18 (digest v17)))
  (declare-const v19 Int)
  (assert (= v19 v0))
  (declare-const v20 Int)
  (assert (= v20 v1))
  (declare-const v21 Int)
  (assert (= v21 v18))
  (declare-const v22 Int)
  (assert (= v22 (+ v19 v20)))
  (declare-const ctc_balance1 Int)
  (= ctc_balance1 (+ ctc_balance0 v22))
  (declare-const v23 Int)
  (assert (= v23 v3))
  (declare-const ctc_balance2 Int)
  (= ctc_balance2 (+ ctc_balance1 v19))
  (declare-const v24 Bool)
  (assert (= v24 (= v23 0)))
  (declare-const v25 Bool)
  (assert (= v25 (= v23 1)))
  (declare-const v26 Bool)
  (assert (= v26 (= v23 2)))
  (declare-const v27 Bool)
  (assert (= v27 (ite v25 true v26)))
  (declare-const v28 Bool)
  (assert (= v28 (ite v24 true v27)))
  (push)
    (assert (not v28))
    (echo "Verifying honest = True, role = RoleContract, tk = TAssert, a = v28")
    (check-sat)
    (get-model)
  (pop)
  (assert v28)
  (declare-const v29 Int)
  (assert (= v29 v14))
  (declare-const v30 Int)
  (assert (= v30 v2))
  (declare-const ctc_balance3 Int)
  (= ctc_balance3 (+ ctc_balance2 0))
  (declare-const v31 Bytes)
  (assert (= v31 (uint256->bytes v29)))
  (declare-const v32 Bytes)
  (assert (= v32 (uint256->bytes v30)))
  (declare-const v33 Bytes)
  (assert (= v33 (msg-cat v31 v32)))
  (declare-const v34 Int)
  (assert (= v34 (digest v33)))
  (declare-const v35 Bool)
  (assert (= v35 (= v21 v34)))
  (push)
    (assert (not v35))
    (echo "Verifying honest = True, role = RoleContract, tk = TAssert, a = v35")
    (check-sat)
    (get-model)
  (pop)
  (assert v35)
  (declare-const v36 Bool)
  (assert (= v36 (= v30 0)))
  (declare-const v37 Bool)
  (assert (= v37 (= v30 1)))
  (declare-const v38 Bool)
  (assert (= v38 (= v30 2)))
  (declare-const v39 Bool)
  (assert (= v39 (ite v37 true v38)))
  (declare-const v40 Bool)
  (assert (= v40 (ite v36 true v39)))
  (push)
    (assert (not v40))
    (echo "Verifying honest = True, role = RoleContract, tk = TAssert, a = v40")
    (check-sat)
    (get-model)
  (pop)
  (assert v40)
  (declare-const v41 Bool)
  (assert (= v41 (= v30 0)))
  (declare-const v42 Bool)
  (assert (= v42 (= v30 1)))
  (declare-const v43 Bool)
  (assert (= v43 (= v30 2)))
  (declare-const v44 Bool)
  (assert (= v44 (ite v42 true v43)))
  (declare-const v45 Bool)
  (assert (= v45 (ite v41 true v44)))
  (declare-const v46 Bool)
  (assert (= v46 (= v23 0)))
  (declare-const v47 Bool)
  (assert (= v47 (= v23 1)))
  (declare-const v48 Bool)
  (assert (= v48 (= v23 2)))
  (declare-const v49 Bool)
  (assert (= v49 (ite v47 true v48)))
  (declare-const v50 Bool)
  (assert (= v50 (ite v46 true v49)))
  (declare-const v51 Bool)
  (assert (= v51 (ite v45 v50 false)))
  (declare-const v52 Int)
  (assert (= v52 (- 4 v23)))
  (declare-const v53 Int)
  (assert (= v53 (+ v30 v52)))
  (declare-const v54 Int)
  (assert (= v54 (mod v53 3)))
  (declare-const v55 Int)
  (assert (= v55 (ite v50 0 1)))
  (declare-const v56 Int)
  (assert (= v56 (ite v45 2 v55)))
  (declare-const v57 Int)
  (assert (= v57 (ite v51 v54 v56)))
  (declare-const v58 Bool)
  (assert (= v58 (= v57 0)))
  (declare-const v59 Bool)
  (assert (= v59 (= v57 1)))
  (declare-const v60 Bool)
  (assert (= v60 (= v57 2)))
  (declare-const v61 Bool)
  (assert (= v61 (ite v59 true v60)))
  (declare-const v62 Bool)
  (assert (= v62 (ite v58 true v61)))
  (push)
    (assert (not v62))
    (echo "Verifying honest = True, role = RoleContract, tk = TAssert, a = v62")
    (check-sat)
    (get-model)
  (pop)
  (assert v62)
  (declare-const v63 Bool)
  (assert (= v63 (= v57 2)))
  (declare-const v64 Bool)
  (assert (= v64 (= v30 0)))
  (declare-const v65 Bool)
  (assert (= v65 (= v30 1)))
  (declare-const v66 Bool)
  (assert (= v66 (= v30 2)))
  (declare-const v67 Bool)
  (assert (= v67 (ite v65 true v66)))
  (declare-const v68 Bool)
  (assert (= v68 (ite v64 true v67)))
  (declare-const v69 Bool)
  (assert (= v69 (ite v63 false true)))
  (declare-const v70 Bool)
  (assert (= v70 (ite v69 true v68)))
  (push)
    (assert (not v70))
    (echo "Verifying honest = True, role = RoleContract, tk = TAssert, a = v70")
    (check-sat)
    (get-model)
  (pop)
  (assert v70)
  (declare-const v71 Bool)
  (assert (= v71 (= v57 0)))
  (declare-const v72 Bool)
  (assert (= v72 (= v23 0)))
  (declare-const v73 Bool)
  (assert (= v73 (= v23 1)))
  (declare-const v74 Bool)
  (assert (= v74 (= v23 2)))
  (declare-const v75 Bool)
  (assert (= v75 (ite v73 true v74)))
  (declare-const v76 Bool)
  (assert (= v76 (ite v72 true v75)))
  (declare-const v77 Bool)
  (assert (= v77 (ite v71 false true)))
  (declare-const v78 Bool)
  (assert (= v78 (ite v77 true v76)))
  (push)
    (assert (not v78))
    (echo "Verifying honest = True, role = RoleContract, tk = TAssert, a = v78")
    (check-sat)
    (get-model)
  (pop)
  (assert v78)
  (declare-const v79 Bool)
  (assert (= v79 (= v57 2)))
  (declare-const v80 Int)
  (assert (= v80 (* 2 v19)))
  (declare-const v81 Int)
  (assert (= v81 (+ v80 v20)))
  (declare-const v82 Bool)
  (assert (= v82 (= v57 0)))
  (declare-const v83 Int)
  (assert (= v83 (* 2 v19)))
  (declare-const v84 Int)
  (assert (= v84 (+ v19 v20)))
  (declare-const v85 Int)
  (assert (= v85 (ite v82 v20 v84)))
  (declare-const v86 Int)
  (assert (= v86 (ite v82 v83 v19)))
  (declare-const v87 Int)
  (assert (= v87 (ite v79 v81 v85)))
  (declare-const v88 Int)
  (assert (= v88 (ite v79 0 v86)))
  (declare-const ctc_balance4 Int)
  (assert (= ctc_balance4 (- ctc_balance3 v87)))
  (declare-const ctc_balance5 Int)
  (assert (= ctc_balance5 (- ctc_balance4 v88)))
  (push)
    (assert (not (= ctc_balance5 0)))
    (echo "Verifying honest = True, role = RoleContract, tk = TBalanceZero, a = (= ctc_balance5 0)")
    (check-sat)
    (get-model)
  (pop)
(pop)

(push)
  (echo "Verifying with honest = True; role = RolePart A")
  (declare-const ctc_balance0 Int)
  (assert (= ctc_balance0 0))
  (declare-const v4 Bool)
  (assert (= v4 (= v2 0)))
  (declare-const v5 Bool)
  (assert (= v5 (= v2 1)))
  (declare-const v6 Bool)
  (assert (= v6 (= v2 2)))
  (declare-const v7 Bool)
  (assert (= v7 (ite v5 true v6)))
  (declare-const v8 Bool)
  (assert (= v8 (ite v4 true v7)))
  (assert v8)
  (declare-const v9 Bool)
  (assert (= v9 (= v3 0)))
  (declare-const v10 Bool)
  (assert (= v10 (= v3 1)))
  (declare-const v11 Bool)
  (assert (= v11 (= v3 2)))
  (declare-const v12 Bool)
  (assert (= v12 (ite v10 true v11)))
  (declare-const v13 Bool)
  (assert (= v13 (ite v9 true v12)))
  (assert v13)
  (declare-const v14 Int)
  
  (declare-const v15 Bytes)
  (assert (= v15 (uint256->bytes v14)))
  (declare-const v16 Bytes)
  (assert (= v16 (uint256->bytes v2)))
  (declare-const v17 Bytes)
  (assert (= v17 (msg-cat v15 v16)))
  (declare-const v18 Int)
  (assert (= v18 (digest v17)))
  (declare-const v19 Int)
  (assert (= v19 v0))
  (declare-const v20 Int)
  (assert (= v20 v1))
  (declare-const v21 Int)
  (assert (= v21 v18))
  (declare-const v22 Int)
  (assert (= v22 (+ v19 v20)))
  (declare-const ctc_balance1 Int)
  (= ctc_balance1 (+ ctc_balance0 v22))
  (declare-const v23 Int)
  (assert (= v23 v3))
  (declare-const ctc_balance2 Int)
  (= ctc_balance2 (+ ctc_balance1 v19))
  (declare-const v24 Bool)
  (assert (= v24 (= v23 0)))
  (declare-const v25 Bool)
  (assert (= v25 (= v23 1)))
  (declare-const v26 Bool)
  (assert (= v26 (= v23 2)))
  (declare-const v27 Bool)
  (assert (= v27 (ite v25 true v26)))
  (declare-const v28 Bool)
  (assert (= v28 (ite v24 true v27)))
  (push)
    (assert (not v28))
    (echo "Verifying honest = True, role = RolePart A, tk = TAssert, a = v28")
    (check-sat)
    (get-model)
  (pop)
  (assert v28)
  (declare-const v29 Int)
  (assert (= v29 v14))
  (declare-const v30 Int)
  (assert (= v30 v2))
  (declare-const ctc_balance3 Int)
  (= ctc_balance3 (+ ctc_balance2 0))
  (declare-const v31 Bytes)
  (assert (= v31 (uint256->bytes v29)))
  (declare-const v32 Bytes)
  (assert (= v32 (uint256->bytes v30)))
  (declare-const v33 Bytes)
  (assert (= v33 (msg-cat v31 v32)))
  (declare-const v34 Int)
  (assert (= v34 (digest v33)))
  (declare-const v35 Bool)
  (assert (= v35 (= v21 v34)))
  (push)
    (assert (not v35))
    (echo "Verifying honest = True, role = RolePart A, tk = TAssert, a = v35")
    (check-sat)
    (get-model)
  (pop)
  (assert v35)
  (declare-const v36 Bool)
  (assert (= v36 (= v30 0)))
  (declare-const v37 Bool)
  (assert (= v37 (= v30 1)))
  (declare-const v38 Bool)
  (assert (= v38 (= v30 2)))
  (declare-const v39 Bool)
  (assert (= v39 (ite v37 true v38)))
  (declare-const v40 Bool)
  (assert (= v40 (ite v36 true v39)))
  (push)
    (assert (not v40))
    (echo "Verifying honest = True, role = RolePart A, tk = TAssert, a = v40")
    (check-sat)
    (get-model)
  (pop)
  (assert v40)
  (declare-const v41 Bool)
  (assert (= v41 (= v30 0)))
  (declare-const v42 Bool)
  (assert (= v42 (= v30 1)))
  (declare-const v43 Bool)
  (assert (= v43 (= v30 2)))
  (declare-const v44 Bool)
  (assert (= v44 (ite v42 true v43)))
  (declare-const v45 Bool)
  (assert (= v45 (ite v41 true v44)))
  (declare-const v46 Bool)
  (assert (= v46 (= v23 0)))
  (declare-const v47 Bool)
  (assert (= v47 (= v23 1)))
  (declare-const v48 Bool)
  (assert (= v48 (= v23 2)))
  (declare-const v49 Bool)
  (assert (= v49 (ite v47 true v48)))
  (declare-const v50 Bool)
  (assert (= v50 (ite v46 true v49)))
  (declare-const v51 Bool)
  (assert (= v51 (ite v45 v50 false)))
  (declare-const v52 Int)
  (assert (= v52 (- 4 v23)))
  (declare-const v53 Int)
  (assert (= v53 (+ v30 v52)))
  (declare-const v54 Int)
  (assert (= v54 (mod v53 3)))
  (declare-const v55 Int)
  (assert (= v55 (ite v50 0 1)))
  (declare-const v56 Int)
  (assert (= v56 (ite v45 2 v55)))
  (declare-const v57 Int)
  (assert (= v57 (ite v51 v54 v56)))
  (declare-const v58 Bool)
  (assert (= v58 (= v57 0)))
  (declare-const v59 Bool)
  (assert (= v59 (= v57 1)))
  (declare-const v60 Bool)
  (assert (= v60 (= v57 2)))
  (declare-const v61 Bool)
  (assert (= v61 (ite v59 true v60)))
  (declare-const v62 Bool)
  (assert (= v62 (ite v58 true v61)))
  (push)
    (assert (not v62))
    (echo "Verifying honest = True, role = RolePart A, tk = TAssert, a = v62")
    (check-sat)
    (get-model)
  (pop)
  (assert v62)
  (declare-const v63 Bool)
  (assert (= v63 (= v57 2)))
  (declare-const v64 Bool)
  (assert (= v64 (= v30 0)))
  (declare-const v65 Bool)
  (assert (= v65 (= v30 1)))
  (declare-const v66 Bool)
  (assert (= v66 (= v30 2)))
  (declare-const v67 Bool)
  (assert (= v67 (ite v65 true v66)))
  (declare-const v68 Bool)
  (assert (= v68 (ite v64 true v67)))
  (declare-const v69 Bool)
  (assert (= v69 (ite v63 false true)))
  (declare-const v70 Bool)
  (assert (= v70 (ite v69 true v68)))
  (push)
    (assert (not v70))
    (echo "Verifying honest = True, role = RolePart A, tk = TAssert, a = v70")
    (check-sat)
    (get-model)
  (pop)
  (assert v70)
  (declare-const v71 Bool)
  (assert (= v71 (= v57 0)))
  (declare-const v72 Bool)
  (assert (= v72 (= v23 0)))
  (declare-const v73 Bool)
  (assert (= v73 (= v23 1)))
  (declare-const v74 Bool)
  (assert (= v74 (= v23 2)))
  (declare-const v75 Bool)
  (assert (= v75 (ite v73 true v74)))
  (declare-const v76 Bool)
  (assert (= v76 (ite v72 true v75)))
  (declare-const v77 Bool)
  (assert (= v77 (ite v71 false true)))
  (declare-const v78 Bool)
  (assert (= v78 (ite v77 true v76)))
  (push)
    (assert (not v78))
    (echo "Verifying honest = True, role = RolePart A, tk = TAssert, a = v78")
    (check-sat)
    (get-model)
  (pop)
  (assert v78)
  (declare-const v79 Bool)
  (assert (= v79 (= v57 2)))
  (declare-const v80 Int)
  (assert (= v80 (* 2 v19)))
  (declare-const v81 Int)
  (assert (= v81 (+ v80 v20)))
  (declare-const v82 Bool)
  (assert (= v82 (= v57 0)))
  (declare-const v83 Int)
  (assert (= v83 (* 2 v19)))
  (declare-const v84 Int)
  (assert (= v84 (+ v19 v20)))
  (declare-const v85 Int)
  (assert (= v85 (ite v82 v20 v84)))
  (declare-const v86 Int)
  (assert (= v86 (ite v82 v83 v19)))
  (declare-const v87 Int)
  (assert (= v87 (ite v79 v81 v85)))
  (declare-const v88 Int)
  (assert (= v88 (ite v79 0 v86)))
  (declare-const ctc_balance4 Int)
  (assert (= ctc_balance4 (- ctc_balance3 v87)))
  (declare-const ctc_balance5 Int)
  (assert (= ctc_balance5 (- ctc_balance4 v88)))
  (push)
    (assert (not (= ctc_balance5 0)))
    (echo "Verifying honest = True, role = RolePart A, tk = TBalanceZero, a = (= ctc_balance5 0)")
    (check-sat)
    (get-model)
  (pop)
(pop)

(push)
  (echo "Verifying with honest = True; role = RolePart B")
  (declare-const ctc_balance0 Int)
  (assert (= ctc_balance0 0))
  (declare-const v4 Bool)
  (assert (= v4 (= v2 0)))
  (declare-const v5 Bool)
  (assert (= v5 (= v2 1)))
  (declare-const v6 Bool)
  (assert (= v6 (= v2 2)))
  (declare-const v7 Bool)
  (assert (= v7 (ite v5 true v6)))
  (declare-const v8 Bool)
  (assert (= v8 (ite v4 true v7)))
  (assert v8)
  (declare-const v9 Bool)
  (assert (= v9 (= v3 0)))
  (declare-const v10 Bool)
  (assert (= v10 (= v3 1)))
  (declare-const v11 Bool)
  (assert (= v11 (= v3 2)))
  (declare-const v12 Bool)
  (assert (= v12 (ite v10 true v11)))
  (declare-const v13 Bool)
  (assert (= v13 (ite v9 true v12)))
  (assert v13)
  (declare-const v14 Int)
  
  (declare-const v15 Bytes)
  (assert (= v15 (uint256->bytes v14)))
  (declare-const v16 Bytes)
  (assert (= v16 (uint256->bytes v2)))
  (declare-const v17 Bytes)
  (assert (= v17 (msg-cat v15 v16)))
  (declare-const v18 Int)
  (assert (= v18 (digest v17)))
  (declare-const v19 Int)
  (assert (= v19 v0))
  (declare-const v20 Int)
  (assert (= v20 v1))
  (declare-const v21 Int)
  (assert (= v21 v18))
  (declare-const v22 Int)
  (assert (= v22 (+ v19 v20)))
  (declare-const ctc_balance1 Int)
  (= ctc_balance1 (+ ctc_balance0 v22))
  (declare-const v23 Int)
  (assert (= v23 v3))
  (declare-const ctc_balance2 Int)
  (= ctc_balance2 (+ ctc_balance1 v19))
  (declare-const v24 Bool)
  (assert (= v24 (= v23 0)))
  (declare-const v25 Bool)
  (assert (= v25 (= v23 1)))
  (declare-const v26 Bool)
  (assert (= v26 (= v23 2)))
  (declare-const v27 Bool)
  (assert (= v27 (ite v25 true v26)))
  (declare-const v28 Bool)
  (assert (= v28 (ite v24 true v27)))
  (push)
    (assert (not v28))
    (echo "Verifying honest = True, role = RolePart B, tk = TAssert, a = v28")
    (check-sat)
    (get-model)
  (pop)
  (assert v28)
  (declare-const v29 Int)
  (assert (= v29 v14))
  (declare-const v30 Int)
  (assert (= v30 v2))
  (declare-const ctc_balance3 Int)
  (= ctc_balance3 (+ ctc_balance2 0))
  (declare-const v31 Bytes)
  (assert (= v31 (uint256->bytes v29)))
  (declare-const v32 Bytes)
  (assert (= v32 (uint256->bytes v30)))
  (declare-const v33 Bytes)
  (assert (= v33 (msg-cat v31 v32)))
  (declare-const v34 Int)
  (assert (= v34 (digest v33)))
  (declare-const v35 Bool)
  (assert (= v35 (= v21 v34)))
  (push)
    (assert (not v35))
    (echo "Verifying honest = True, role = RolePart B, tk = TAssert, a = v35")
    (check-sat)
    (get-model)
  (pop)
  (assert v35)
  (declare-const v36 Bool)
  (assert (= v36 (= v30 0)))
  (declare-const v37 Bool)
  (assert (= v37 (= v30 1)))
  (declare-const v38 Bool)
  (assert (= v38 (= v30 2)))
  (declare-const v39 Bool)
  (assert (= v39 (ite v37 true v38)))
  (declare-const v40 Bool)
  (assert (= v40 (ite v36 true v39)))
  (push)
    (assert (not v40))
    (echo "Verifying honest = True, role = RolePart B, tk = TAssert, a = v40")
    (check-sat)
    (get-model)
  (pop)
  (assert v40)
  (declare-const v41 Bool)
  (assert (= v41 (= v30 0)))
  (declare-const v42 Bool)
  (assert (= v42 (= v30 1)))
  (declare-const v43 Bool)
  (assert (= v43 (= v30 2)))
  (declare-const v44 Bool)
  (assert (= v44 (ite v42 true v43)))
  (declare-const v45 Bool)
  (assert (= v45 (ite v41 true v44)))
  (declare-const v46 Bool)
  (assert (= v46 (= v23 0)))
  (declare-const v47 Bool)
  (assert (= v47 (= v23 1)))
  (declare-const v48 Bool)
  (assert (= v48 (= v23 2)))
  (declare-const v49 Bool)
  (assert (= v49 (ite v47 true v48)))
  (declare-const v50 Bool)
  (assert (= v50 (ite v46 true v49)))
  (declare-const v51 Bool)
  (assert (= v51 (ite v45 v50 false)))
  (declare-const v52 Int)
  (assert (= v52 (- 4 v23)))
  (declare-const v53 Int)
  (assert (= v53 (+ v30 v52)))
  (declare-const v54 Int)
  (assert (= v54 (mod v53 3)))
  (declare-const v55 Int)
  (assert (= v55 (ite v50 0 1)))
  (declare-const v56 Int)
  (assert (= v56 (ite v45 2 v55)))
  (declare-const v57 Int)
  (assert (= v57 (ite v51 v54 v56)))
  (declare-const v58 Bool)
  (assert (= v58 (= v57 0)))
  (declare-const v59 Bool)
  (assert (= v59 (= v57 1)))
  (declare-const v60 Bool)
  (assert (= v60 (= v57 2)))
  (declare-const v61 Bool)
  (assert (= v61 (ite v59 true v60)))
  (declare-const v62 Bool)
  (assert (= v62 (ite v58 true v61)))
  (push)
    (assert (not v62))
    (echo "Verifying honest = True, role = RolePart B, tk = TAssert, a = v62")
    (check-sat)
    (get-model)
  (pop)
  (assert v62)
  (declare-const v63 Bool)
  (assert (= v63 (= v57 2)))
  (declare-const v64 Bool)
  (assert (= v64 (= v30 0)))
  (declare-const v65 Bool)
  (assert (= v65 (= v30 1)))
  (declare-const v66 Bool)
  (assert (= v66 (= v30 2)))
  (declare-const v67 Bool)
  (assert (= v67 (ite v65 true v66)))
  (declare-const v68 Bool)
  (assert (= v68 (ite v64 true v67)))
  (declare-const v69 Bool)
  (assert (= v69 (ite v63 false true)))
  (declare-const v70 Bool)
  (assert (= v70 (ite v69 true v68)))
  (push)
    (assert (not v70))
    (echo "Verifying honest = True, role = RolePart B, tk = TAssert, a = v70")
    (check-sat)
    (get-model)
  (pop)
  (assert v70)
  (declare-const v71 Bool)
  (assert (= v71 (= v57 0)))
  (declare-const v72 Bool)
  (assert (= v72 (= v23 0)))
  (declare-const v73 Bool)
  (assert (= v73 (= v23 1)))
  (declare-const v74 Bool)
  (assert (= v74 (= v23 2)))
  (declare-const v75 Bool)
  (assert (= v75 (ite v73 true v74)))
  (declare-const v76 Bool)
  (assert (= v76 (ite v72 true v75)))
  (declare-const v77 Bool)
  (assert (= v77 (ite v71 false true)))
  (declare-const v78 Bool)
  (assert (= v78 (ite v77 true v76)))
  (push)
    (assert (not v78))
    (echo "Verifying honest = True, role = RolePart B, tk = TAssert, a = v78")
    (check-sat)
    (get-model)
  (pop)
  (assert v78)
  (declare-const v79 Bool)
  (assert (= v79 (= v57 2)))
  (declare-const v80 Int)
  (assert (= v80 (* 2 v19)))
  (declare-const v81 Int)
  (assert (= v81 (+ v80 v20)))
  (declare-const v82 Bool)
  (assert (= v82 (= v57 0)))
  (declare-const v83 Int)
  (assert (= v83 (* 2 v19)))
  (declare-const v84 Int)
  (assert (= v84 (+ v19 v20)))
  (declare-const v85 Int)
  (assert (= v85 (ite v82 v20 v84)))
  (declare-const v86 Int)
  (assert (= v86 (ite v82 v83 v19)))
  (declare-const v87 Int)
  (assert (= v87 (ite v79 v81 v85)))
  (declare-const v88 Int)
  (assert (= v88 (ite v79 0 v86)))
  (declare-const ctc_balance4 Int)
  (assert (= ctc_balance4 (- ctc_balance3 v87)))
  (declare-const ctc_balance5 Int)
  (assert (= ctc_balance5 (- ctc_balance4 v88)))
  (push)
    (assert (not (= ctc_balance5 0)))
    (echo "Verifying honest = True, role = RolePart B, tk = TBalanceZero, a = (= ctc_balance5 0)")
    (check-sat)
    (get-model)
  (pop)
(pop)

(push)
  (echo "Verifying with honest = False; role = RoleContract")
  (declare-const ctc_balance0 Int)
  (assert (= ctc_balance0 0))
  (declare-const v4 Bool)
  (declare-const v5 Bool)
  (declare-const v6 Bool)
  (declare-const v7 Bool)
  (declare-const v8 Bool)
  (declare-const v9 Bool)
  (declare-const v10 Bool)
  (declare-const v11 Bool)
  (declare-const v12 Bool)
  (declare-const v13 Bool)
  (declare-const v14 Int)
  (declare-const v15 Bytes)
  (declare-const v16 Bytes)
  (declare-const v17 Bytes)
  (declare-const v18 Int)
  (declare-const v19 Int)
  (declare-const v20 Int)
  (declare-const v21 Int)
  (declare-const v22 Int)
  (declare-const ctc_balance1 Int)
  (<= ctc_balance0 ctc_balance1)
  (declare-const v23 Int)
  (declare-const ctc_balance2 Int)
  (<= ctc_balance1 ctc_balance2)
  (declare-const v24 Bool)
  (assert (= v24 (= v23 0)))
  (declare-const v25 Bool)
  (assert (= v25 (= v23 1)))
  (declare-const v26 Bool)
  (assert (= v26 (= v23 2)))
  (declare-const v27 Bool)
  (assert (= v27 (ite v25 true v26)))
  (declare-const v28 Bool)
  (assert (= v28 (ite v24 true v27)))
  (assert v28)
  (declare-const v29 Int)
  (declare-const v30 Int)
  (declare-const ctc_balance3 Int)
  (<= ctc_balance2 ctc_balance3)
  (declare-const v31 Bytes)
  (assert (= v31 (uint256->bytes v29)))
  (declare-const v32 Bytes)
  (assert (= v32 (uint256->bytes v30)))
  (declare-const v33 Bytes)
  (assert (= v33 (msg-cat v31 v32)))
  (declare-const v34 Int)
  (assert (= v34 (digest v33)))
  (declare-const v35 Bool)
  (assert (= v35 (= v21 v34)))
  (assert v35)
  (declare-const v36 Bool)
  (assert (= v36 (= v30 0)))
  (declare-const v37 Bool)
  (assert (= v37 (= v30 1)))
  (declare-const v38 Bool)
  (assert (= v38 (= v30 2)))
  (declare-const v39 Bool)
  (assert (= v39 (ite v37 true v38)))
  (declare-const v40 Bool)
  (assert (= v40 (ite v36 true v39)))
  (assert v40)
  (declare-const v41 Bool)
  (assert (= v41 (= v30 0)))
  (declare-const v42 Bool)
  (assert (= v42 (= v30 1)))
  (declare-const v43 Bool)
  (assert (= v43 (= v30 2)))
  (declare-const v44 Bool)
  (assert (= v44 (ite v42 true v43)))
  (declare-const v45 Bool)
  (assert (= v45 (ite v41 true v44)))
  (declare-const v46 Bool)
  (assert (= v46 (= v23 0)))
  (declare-const v47 Bool)
  (assert (= v47 (= v23 1)))
  (declare-const v48 Bool)
  (assert (= v48 (= v23 2)))
  (declare-const v49 Bool)
  (assert (= v49 (ite v47 true v48)))
  (declare-const v50 Bool)
  (assert (= v50 (ite v46 true v49)))
  (declare-const v51 Bool)
  (assert (= v51 (ite v45 v50 false)))
  (declare-const v52 Int)
  (assert (= v52 (- 4 v23)))
  (declare-const v53 Int)
  (assert (= v53 (+ v30 v52)))
  (declare-const v54 Int)
  (assert (= v54 (mod v53 3)))
  (declare-const v55 Int)
  (assert (= v55 (ite v50 0 1)))
  (declare-const v56 Int)
  (assert (= v56 (ite v45 2 v55)))
  (declare-const v57 Int)
  (assert (= v57 (ite v51 v54 v56)))
  (declare-const v58 Bool)
  (assert (= v58 (= v57 0)))
  (declare-const v59 Bool)
  (assert (= v59 (= v57 1)))
  (declare-const v60 Bool)
  (assert (= v60 (= v57 2)))
  (declare-const v61 Bool)
  (assert (= v61 (ite v59 true v60)))
  (declare-const v62 Bool)
  (assert (= v62 (ite v58 true v61)))
  (push)
    (assert (not v62))
    (echo "Verifying honest = False, role = RoleContract, tk = TAssert, a = v62")
    (check-sat)
    (get-model)
  (pop)
  (assert v62)
  (declare-const v63 Bool)
  (assert (= v63 (= v57 2)))
  (declare-const v64 Bool)
  (assert (= v64 (= v30 0)))
  (declare-const v65 Bool)
  (assert (= v65 (= v30 1)))
  (declare-const v66 Bool)
  (assert (= v66 (= v30 2)))
  (declare-const v67 Bool)
  (assert (= v67 (ite v65 true v66)))
  (declare-const v68 Bool)
  (assert (= v68 (ite v64 true v67)))
  (declare-const v69 Bool)
  (assert (= v69 (ite v63 false true)))
  (declare-const v70 Bool)
  (assert (= v70 (ite v69 true v68)))
  (push)
    (assert (not v70))
    (echo "Verifying honest = False, role = RoleContract, tk = TAssert, a = v70")
    (check-sat)
    (get-model)
  (pop)
  (assert v70)
  (declare-const v71 Bool)
  (assert (= v71 (= v57 0)))
  (declare-const v72 Bool)
  (assert (= v72 (= v23 0)))
  (declare-const v73 Bool)
  (assert (= v73 (= v23 1)))
  (declare-const v74 Bool)
  (assert (= v74 (= v23 2)))
  (declare-const v75 Bool)
  (assert (= v75 (ite v73 true v74)))
  (declare-const v76 Bool)
  (assert (= v76 (ite v72 true v75)))
  (declare-const v77 Bool)
  (assert (= v77 (ite v71 false true)))
  (declare-const v78 Bool)
  (assert (= v78 (ite v77 true v76)))
  (push)
    (assert (not v78))
    (echo "Verifying honest = False, role = RoleContract, tk = TAssert, a = v78")
    (check-sat)
    (get-model)
  (pop)
  (assert v78)
  (declare-const v79 Bool)
  (assert (= v79 (= v57 2)))
  (declare-const v80 Int)
  (assert (= v80 (* 2 v19)))
  (declare-const v81 Int)
  (assert (= v81 (+ v80 v20)))
  (declare-const v82 Bool)
  (assert (= v82 (= v57 0)))
  (declare-const v83 Int)
  (assert (= v83 (* 2 v19)))
  (declare-const v84 Int)
  (assert (= v84 (+ v19 v20)))
  (declare-const v85 Int)
  (assert (= v85 (ite v82 v20 v84)))
  (declare-const v86 Int)
  (assert (= v86 (ite v82 v83 v19)))
  (declare-const v87 Int)
  (assert (= v87 (ite v79 v81 v85)))
  (declare-const v88 Int)
  (assert (= v88 (ite v79 0 v86)))
  (declare-const ctc_balance4 Int)
  (assert (= ctc_balance4 (- ctc_balance3 v87)))
  (declare-const ctc_balance5 Int)
  (assert (= ctc_balance5 (- ctc_balance4 v88)))
  (push)
    (assert (not (= ctc_balance5 0)))
    (echo "Verifying honest = False, role = RoleContract, tk = TBalanceZero, a = (= ctc_balance5 0)")
    (check-sat)
    (get-model)
  (pop)
(pop)

(push)
  (echo "Verifying with honest = False; role = RolePart A")
  (declare-const ctc_balance0 Int)
  (assert (= ctc_balance0 0))
  (declare-const v4 Bool)
  (assert (= v4 (= v2 0)))
  (declare-const v5 Bool)
  (assert (= v5 (= v2 1)))
  (declare-const v6 Bool)
  (assert (= v6 (= v2 2)))
  (declare-const v7 Bool)
  (assert (= v7 (ite v5 true v6)))
  (declare-const v8 Bool)
  (assert (= v8 (ite v4 true v7)))
  (assert v8)
  (declare-const v9 Bool)
  (declare-const v10 Bool)
  (declare-const v11 Bool)
  (declare-const v12 Bool)
  (declare-const v13 Bool)
  (declare-const v14 Int)
  
  (declare-const v15 Bytes)
  (assert (= v15 (uint256->bytes v14)))
  (declare-const v16 Bytes)
  (assert (= v16 (uint256->bytes v2)))
  (declare-const v17 Bytes)
  (assert (= v17 (msg-cat v15 v16)))
  (declare-const v18 Int)
  (assert (= v18 (digest v17)))
  (declare-const v19 Int)
  (assert (= v19 v0))
  (declare-const v20 Int)
  (assert (= v20 v1))
  (declare-const v21 Int)
  (assert (= v21 v18))
  (declare-const v22 Int)
  (assert (= v22 (+ v19 v20)))
  (declare-const ctc_balance1 Int)
  (<= ctc_balance0 ctc_balance1)
  (declare-const v23 Int)
  (declare-const ctc_balance2 Int)
  (<= ctc_balance1 ctc_balance2)
  (declare-const v24 Bool)
  (assert (= v24 (= v23 0)))
  (declare-const v25 Bool)
  (assert (= v25 (= v23 1)))
  (declare-const v26 Bool)
  (assert (= v26 (= v23 2)))
  (declare-const v27 Bool)
  (assert (= v27 (ite v25 true v26)))
  (declare-const v28 Bool)
  (assert (= v28 (ite v24 true v27)))
  (assert v28)
  (declare-const v29 Int)
  (assert (= v29 v14))
  (declare-const v30 Int)
  (assert (= v30 v2))
  (declare-const ctc_balance3 Int)
  (<= ctc_balance2 ctc_balance3)
  (declare-const v31 Bytes)
  (assert (= v31 (uint256->bytes v29)))
  (declare-const v32 Bytes)
  (assert (= v32 (uint256->bytes v30)))
  (declare-const v33 Bytes)
  (assert (= v33 (msg-cat v31 v32)))
  (declare-const v34 Int)
  (assert (= v34 (digest v33)))
  (declare-const v35 Bool)
  (assert (= v35 (= v21 v34)))
  (assert v35)
  (declare-const v36 Bool)
  (assert (= v36 (= v30 0)))
  (declare-const v37 Bool)
  (assert (= v37 (= v30 1)))
  (declare-const v38 Bool)
  (assert (= v38 (= v30 2)))
  (declare-const v39 Bool)
  (assert (= v39 (ite v37 true v38)))
  (declare-const v40 Bool)
  (assert (= v40 (ite v36 true v39)))
  (assert v40)
  (declare-const v41 Bool)
  (assert (= v41 (= v30 0)))
  (declare-const v42 Bool)
  (assert (= v42 (= v30 1)))
  (declare-const v43 Bool)
  (assert (= v43 (= v30 2)))
  (declare-const v44 Bool)
  (assert (= v44 (ite v42 true v43)))
  (declare-const v45 Bool)
  (assert (= v45 (ite v41 true v44)))
  (declare-const v46 Bool)
  (assert (= v46 (= v23 0)))
  (declare-const v47 Bool)
  (assert (= v47 (= v23 1)))
  (declare-const v48 Bool)
  (assert (= v48 (= v23 2)))
  (declare-const v49 Bool)
  (assert (= v49 (ite v47 true v48)))
  (declare-const v50 Bool)
  (assert (= v50 (ite v46 true v49)))
  (declare-const v51 Bool)
  (assert (= v51 (ite v45 v50 false)))
  (declare-const v52 Int)
  (assert (= v52 (- 4 v23)))
  (declare-const v53 Int)
  (assert (= v53 (+ v30 v52)))
  (declare-const v54 Int)
  (assert (= v54 (mod v53 3)))
  (declare-const v55 Int)
  (assert (= v55 (ite v50 0 1)))
  (declare-const v56 Int)
  (assert (= v56 (ite v45 2 v55)))
  (declare-const v57 Int)
  (assert (= v57 (ite v51 v54 v56)))
  (declare-const v58 Bool)
  (assert (= v58 (= v57 0)))
  (declare-const v59 Bool)
  (assert (= v59 (= v57 1)))
  (declare-const v60 Bool)
  (assert (= v60 (= v57 2)))
  (declare-const v61 Bool)
  (assert (= v61 (ite v59 true v60)))
  (declare-const v62 Bool)
  (assert (= v62 (ite v58 true v61)))
  (push)
    (assert (not v62))
    (echo "Verifying honest = False, role = RolePart A, tk = TAssert, a = v62")
    (check-sat)
    (get-model)
  (pop)
  (assert v62)
  (declare-const v63 Bool)
  (assert (= v63 (= v57 2)))
  (declare-const v64 Bool)
  (assert (= v64 (= v30 0)))
  (declare-const v65 Bool)
  (assert (= v65 (= v30 1)))
  (declare-const v66 Bool)
  (assert (= v66 (= v30 2)))
  (declare-const v67 Bool)
  (assert (= v67 (ite v65 true v66)))
  (declare-const v68 Bool)
  (assert (= v68 (ite v64 true v67)))
  (declare-const v69 Bool)
  (assert (= v69 (ite v63 false true)))
  (declare-const v70 Bool)
  (assert (= v70 (ite v69 true v68)))
  (push)
    (assert (not v70))
    (echo "Verifying honest = False, role = RolePart A, tk = TAssert, a = v70")
    (check-sat)
    (get-model)
  (pop)
  (assert v70)
  (declare-const v71 Bool)
  (assert (= v71 (= v57 0)))
  (declare-const v72 Bool)
  (assert (= v72 (= v23 0)))
  (declare-const v73 Bool)
  (assert (= v73 (= v23 1)))
  (declare-const v74 Bool)
  (assert (= v74 (= v23 2)))
  (declare-const v75 Bool)
  (assert (= v75 (ite v73 true v74)))
  (declare-const v76 Bool)
  (assert (= v76 (ite v72 true v75)))
  (declare-const v77 Bool)
  (assert (= v77 (ite v71 false true)))
  (declare-const v78 Bool)
  (assert (= v78 (ite v77 true v76)))
  (push)
    (assert (not v78))
    (echo "Verifying honest = False, role = RolePart A, tk = TAssert, a = v78")
    (check-sat)
    (get-model)
  (pop)
  (assert v78)
  (declare-const v79 Bool)
  (assert (= v79 (= v57 2)))
  (declare-const v80 Int)
  (assert (= v80 (* 2 v19)))
  (declare-const v81 Int)
  (assert (= v81 (+ v80 v20)))
  (declare-const v82 Bool)
  (assert (= v82 (= v57 0)))
  (declare-const v83 Int)
  (assert (= v83 (* 2 v19)))
  (declare-const v84 Int)
  (assert (= v84 (+ v19 v20)))
  (declare-const v85 Int)
  (assert (= v85 (ite v82 v20 v84)))
  (declare-const v86 Int)
  (assert (= v86 (ite v82 v83 v19)))
  (declare-const v87 Int)
  (assert (= v87 (ite v79 v81 v85)))
  (declare-const v88 Int)
  (assert (= v88 (ite v79 0 v86)))
  (declare-const ctc_balance4 Int)
  (assert (= ctc_balance4 (- ctc_balance3 v87)))
  (declare-const ctc_balance5 Int)
  (assert (= ctc_balance5 (- ctc_balance4 v88)))
  (push)
    (assert (not (= ctc_balance5 0)))
    (echo "Verifying honest = False, role = RolePart A, tk = TBalanceZero, a = (= ctc_balance5 0)")
    (check-sat)
    (get-model)
  (pop)
(pop)

(push)
  (echo "Verifying with honest = False; role = RolePart B")
  (declare-const ctc_balance0 Int)
  (assert (= ctc_balance0 0))
  (declare-const v4 Bool)
  (declare-const v5 Bool)
  (declare-const v6 Bool)
  (declare-const v7 Bool)
  (declare-const v8 Bool)
  (declare-const v9 Bool)
  (assert (= v9 (= v3 0)))
  (declare-const v10 Bool)
  (assert (= v10 (= v3 1)))
  (declare-const v11 Bool)
  (assert (= v11 (= v3 2)))
  (declare-const v12 Bool)
  (assert (= v12 (ite v10 true v11)))
  (declare-const v13 Bool)
  (assert (= v13 (ite v9 true v12)))
  (assert v13)
  (declare-const v14 Int)
  (declare-const v15 Bytes)
  (declare-const v16 Bytes)
  (declare-const v17 Bytes)
  (declare-const v18 Int)
  (declare-const v19 Int)
  (declare-const v20 Int)
  (declare-const v21 Int)
  (declare-const v22 Int)
  (declare-const ctc_balance1 Int)
  (<= ctc_balance0 ctc_balance1)
  (declare-const v23 Int)
  (assert (= v23 v3))
  (declare-const ctc_balance2 Int)
  (<= ctc_balance1 ctc_balance2)
  (declare-const v24 Bool)
  (assert (= v24 (= v23 0)))
  (declare-const v25 Bool)
  (assert (= v25 (= v23 1)))
  (declare-const v26 Bool)
  (assert (= v26 (= v23 2)))
  (declare-const v27 Bool)
  (assert (= v27 (ite v25 true v26)))
  (declare-const v28 Bool)
  (assert (= v28 (ite v24 true v27)))
  (assert v28)
  (declare-const v29 Int)
  (declare-const v30 Int)
  (declare-const ctc_balance3 Int)
  (<= ctc_balance2 ctc_balance3)
  (declare-const v31 Bytes)
  (assert (= v31 (uint256->bytes v29)))
  (declare-const v32 Bytes)
  (assert (= v32 (uint256->bytes v30)))
  (declare-const v33 Bytes)
  (assert (= v33 (msg-cat v31 v32)))
  (declare-const v34 Int)
  (assert (= v34 (digest v33)))
  (declare-const v35 Bool)
  (assert (= v35 (= v21 v34)))
  (assert v35)
  (declare-const v36 Bool)
  (assert (= v36 (= v30 0)))
  (declare-const v37 Bool)
  (assert (= v37 (= v30 1)))
  (declare-const v38 Bool)
  (assert (= v38 (= v30 2)))
  (declare-const v39 Bool)
  (assert (= v39 (ite v37 true v38)))
  (declare-const v40 Bool)
  (assert (= v40 (ite v36 true v39)))
  (assert v40)
  (declare-const v41 Bool)
  (assert (= v41 (= v30 0)))
  (declare-const v42 Bool)
  (assert (= v42 (= v30 1)))
  (declare-const v43 Bool)
  (assert (= v43 (= v30 2)))
  (declare-const v44 Bool)
  (assert (= v44 (ite v42 true v43)))
  (declare-const v45 Bool)
  (assert (= v45 (ite v41 true v44)))
  (declare-const v46 Bool)
  (assert (= v46 (= v23 0)))
  (declare-const v47 Bool)
  (assert (= v47 (= v23 1)))
  (declare-const v48 Bool)
  (assert (= v48 (= v23 2)))
  (declare-const v49 Bool)
  (assert (= v49 (ite v47 true v48)))
  (declare-const v50 Bool)
  (assert (= v50 (ite v46 true v49)))
  (declare-const v51 Bool)
  (assert (= v51 (ite v45 v50 false)))
  (declare-const v52 Int)
  (assert (= v52 (- 4 v23)))
  (declare-const v53 Int)
  (assert (= v53 (+ v30 v52)))
  (declare-const v54 Int)
  (assert (= v54 (mod v53 3)))
  (declare-const v55 Int)
  (assert (= v55 (ite v50 0 1)))
  (declare-const v56 Int)
  (assert (= v56 (ite v45 2 v55)))
  (declare-const v57 Int)
  (assert (= v57 (ite v51 v54 v56)))
  (declare-const v58 Bool)
  (assert (= v58 (= v57 0)))
  (declare-const v59 Bool)
  (assert (= v59 (= v57 1)))
  (declare-const v60 Bool)
  (assert (= v60 (= v57 2)))
  (declare-const v61 Bool)
  (assert (= v61 (ite v59 true v60)))
  (declare-const v62 Bool)
  (assert (= v62 (ite v58 true v61)))
  (push)
    (assert (not v62))
    (echo "Verifying honest = False, role = RolePart B, tk = TAssert, a = v62")
    (check-sat)
    (get-model)
  (pop)
  (assert v62)
  (declare-const v63 Bool)
  (assert (= v63 (= v57 2)))
  (declare-const v64 Bool)
  (assert (= v64 (= v30 0)))
  (declare-const v65 Bool)
  (assert (= v65 (= v30 1)))
  (declare-const v66 Bool)
  (assert (= v66 (= v30 2)))
  (declare-const v67 Bool)
  (assert (= v67 (ite v65 true v66)))
  (declare-const v68 Bool)
  (assert (= v68 (ite v64 true v67)))
  (declare-const v69 Bool)
  (assert (= v69 (ite v63 false true)))
  (declare-const v70 Bool)
  (assert (= v70 (ite v69 true v68)))
  (push)
    (assert (not v70))
    (echo "Verifying honest = False, role = RolePart B, tk = TAssert, a = v70")
    (check-sat)
    (get-model)
  (pop)
  (assert v70)
  (declare-const v71 Bool)
  (assert (= v71 (= v57 0)))
  (declare-const v72 Bool)
  (assert (= v72 (= v23 0)))
  (declare-const v73 Bool)
  (assert (= v73 (= v23 1)))
  (declare-const v74 Bool)
  (assert (= v74 (= v23 2)))
  (declare-const v75 Bool)
  (assert (= v75 (ite v73 true v74)))
  (declare-const v76 Bool)
  (assert (= v76 (ite v72 true v75)))
  (declare-const v77 Bool)
  (assert (= v77 (ite v71 false true)))
  (declare-const v78 Bool)
  (assert (= v78 (ite v77 true v76)))
  (push)
    (assert (not v78))
    (echo "Verifying honest = False, role = RolePart B, tk = TAssert, a = v78")
    (check-sat)
    (get-model)
  (pop)
  (assert v78)
  (declare-const v79 Bool)
  (assert (= v79 (= v57 2)))
  (declare-const v80 Int)
  (assert (= v80 (* 2 v19)))
  (declare-const v81 Int)
  (assert (= v81 (+ v80 v20)))
  (declare-const v82 Bool)
  (assert (= v82 (= v57 0)))
  (declare-const v83 Int)
  (assert (= v83 (* 2 v19)))
  (declare-const v84 Int)
  (assert (= v84 (+ v19 v20)))
  (declare-const v85 Int)
  (assert (= v85 (ite v82 v20 v84)))
  (declare-const v86 Int)
  (assert (= v86 (ite v82 v83 v19)))
  (declare-const v87 Int)
  (assert (= v87 (ite v79 v81 v85)))
  (declare-const v88 Int)
  (assert (= v88 (ite v79 0 v86)))
  (declare-const ctc_balance4 Int)
  (assert (= ctc_balance4 (- ctc_balance3 v87)))
  (declare-const ctc_balance5 Int)
  (assert (= ctc_balance5 (- ctc_balance4 v88)))
  (push)
    (assert (not (= ctc_balance5 0)))
    (echo "Verifying honest = False, role = RolePart B, tk = TBalanceZero, a = (= ctc_balance5 0)")
    (check-sat)
    (get-model)
  (pop)
(pop)
