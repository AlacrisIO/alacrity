// General-Purpose support for Adversarial Games
//
// Most games over the blockchain are two-player games, because
// if people know each other they don't usually need blockchain to create trust,
// whereas if they do need blockchain to create trust, then more than two players
// (or teams of players) mean that several players (or teams) could improve their odds
// by colluding or playing more than one role, unless it's a pure lottery
// with no useful private information to share that could improve strategy.

import base;
import stdlib;

class Game extends ClosedInteraction {
  class GameResult {
    enact : GameResult =[IO]=> unit;
  }
}

class WinnerTakesAll extends Game {
  total_proceeds () : Assets {
    return players.map({t} => stake(t)).reduce((+), 0);
  }
  wins : PlayerIndex => game_result = (winner) => {
    enact () {
      send_tokens(players[winner].identity, total_proceeds());
    }
  }
  draw : unit => game_result = {
    enact = abort_interaction;
  }
}

const dominationGameResult :
    TwoPlayers ==> ((hand, hand) => int) => (hand, hand) => game_result =
    dominationCompare => (hand0, hand1) => {
    let cmp = domination_compare(hand0, hand1);
    if (cmp > 0) {
      wins(Player0);
    } else if (cmp < 0) {
      wins(Player1);
    } else {
      draw();
    }
  }
}

// Local Variables:
// mode: JavaScript
// End:
