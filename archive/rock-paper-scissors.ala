#lang alacrity/exe

enum isHand { ROCK, PAPER, SCISSORS };
enum isOutcome { B_WINS, DRAW, A_WINS };

function winner(handA : isHand, handB : isHand) : isOutcome {
    ((handA + (4 - handB)) % 3) }

// Test matrix for winner function
assert! winner(ROCK,     ROCK)     == DRAW
assert! winner(ROCK,     PAPER)    == B_WINS
assert! winner(ROCK,     SCISSORS) == A_WINS
assert! winner(PAPER,    ROCK)     == A_WINS
assert! winner(PAPER,    PAPER)    == DRAW
assert! winner(PAPER,    SCISSORS) == B_WINS
assert! winner(SCISSORS, ROCK)     == B_WINS
assert! winner(SCISSORS, PAPER)    == A_WINS
assert! winner(SCISSORS, SCISSORS) == DRAW

// TODO: rename this function???
function fair_if(handX, optionX, canWinX) {
    possible? ((handX == optionX) && canWinX) }

function fair_for_player(handX, canWinX) {
    fair_if(handX, ROCK, canWinX);
    fair_if(handX, PAPER, canWinX);
    fair_if(handX, SCISSORS, canWinX) }

function fair_game(handA, handB, outcome) {
    fair_for_player(handA, (outcome == A_WINS));
    fair_for_player(handB, (outcome == B_WINS)) }

participant A {
    uint256 wagerAmount,
    uint256 escrowAmount,
    uint256 handA }

participant B {
    uint256 handB }

main {
    @A {
      promise! isHand(handA);
      const commitA, saltA = precommit(handA);
      publish! wagerAmount, escrowAmount, commitA;
      deposit! (wagerAmount + escrowAmount);
    }
    @B {
      promise! isHand(handB);
      publish! handB;
      deposit! wagerAmount;
    }
    require! isHand(handB);

    @A publish! saltA, handA;

    check_commit(commitA, saltA, handA);
    require! isHand(handA);
    const outcome = winner(handA, handB);
    assert! ((outcome == A_WINS) => isHand(handA));
    assert! ((outcome == B_WINS) => isHand(handB));
    const getsA, getsB =
          if (outcome == A_WINS) {
              values (2 * wagerAmount), 0 }
          else if (outcome == B_WINS) {
              values 0, (2 * wagerAmount) }
          else {
              values wagerAmount, wagerAmount };
    transfer! A <- (escrowAmount + getsA);
    transfer! B <- getsB;

    fair_game(handA, handB, outcome);
    outcome }


// The first timeout MAY be short. The other ones MUST be long enough to fend off DoS attacks.



